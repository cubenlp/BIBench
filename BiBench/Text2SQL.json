[
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出1945年上映的电影名称。按电影受欢迎程度的降序对列表进行排序。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie_title\nFROM movies\nWHERE movie_release_year = 1945\nORDER BY movie_popularity DESC;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出最受欢迎的电影是什么？这部电影什么时候上映的？谁是这部电影的导演？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, m.movie_release_year, m.director_name\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nGROUP BY m.movie_id\nORDER BY AVG(r.rating_score) DESC, COUNT(r.rating_id) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:最长的电影片名叫什么？它什么时候发布的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie_title, movie_release_year \nFROM movies \nORDER BY LENGTH(movie_title) DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出收视率最高的电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie_title \nFROM movies \nORDER BY movie_popularity DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:喜欢斯坦利·库布里克导演的电影的Mubi用户的平均数量是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(user_count) AS avg_users_who_like_kubrick_movies\nFROM (\n    SELECT COUNT(DISTINCT r.user_id) AS user_count\n    FROM movies m\n    JOIN ratings r ON m.movie_id = r.movie_id\n    WHERE m.director_name = 'Stanley Kubrick'\n) AS user_counts;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《我什么时候会被爱》的平均评分是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT AVG(rating_score) AS average_rating\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE movie_title = '我什么时候会被爱';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户41579158的用户头像url是什么？他/她评价的最新电影是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT ru.user_avatar_image_url, m.movie_title\nFROM ratings_users ru\nJOIN ratings r ON ru.user_id = r.user_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE ru.user_id = 41579158\nORDER BY r.rating_timestamp_utc DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:订阅用户对评分的百分比是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n    CONCAT(ROUND((SUM(user_subscriber) / COUNT(*)) * 100, 2), '%') AS subscriber_rating_percentage\nFROM\n    ratings;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出试用用户在2020年4月评分的所有电影标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nJOIN ratings_users ru ON r.user_id = ru.user_id\nWHERE ru.user_trialist = 1\nAND r.rating_timestamp_utc BETWEEN '2020-04-01 00:00:00' AND '2020-04-30 23:59:59';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出电影《爱会撕裂我们》评分最差的其他用户。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.user_id\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '爱会撕裂我们'\nORDER BY r.rating_score ASC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有评分最高的电影。说明喜爱电影的Mubi用户的电影标题和编号。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, m.movie_id\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nGROUP BY m.movie_id, m.movie_title\nHAVING r.rating_score = MAX(r.rating_score);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于2020年的所有评分，请列出评分为4分及以上的电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_id, m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_score >= 4 AND YEAR(r.rating_timestamp_utc) = 2020;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于用户留下影评人的所有电影，请查找该用户的电影名称、用户、评分和影评人评论。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, r.user_id, r.rating_score, r.critic_comments\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.user_id = (SELECT user_id FROM ratings_users WHERE user_subscriber = 1)\nAND r.critic IS NOT NULL;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于名为《欢迎来到玩偶之家》的电影，有多少百分比的收视率被评为最高分。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ROUND((COUNT(*) / (SELECT COUNT(*) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = '欢迎来到玩偶之家'))) * 100, 2) AS highest_rating_percentage\nFROM \n    ratings\nWHERE \n    movie_id = (SELECT movie_id FROM movies WHERE movie_title = '欢迎来到玩偶之家')\n    AND rating_score = (SELECT MAX(rating_score) FROM ratings);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2021年上映的分级电影的百分比是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n    (COUNT(DISTINCT CASE WHEN movie_release_year = 2021 THEN movie_id END) / COUNT(DISTINCT movie_id)) * 100 AS percentage_of_rated_movies_2021\nFROM\n    movies\nJOIN\n    ratings ON movies.movie_id = ratings.movie_id;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁是电影《性、酒、血》的导演？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT director_name FROM movies WHERE movie_title = '性、酒、血';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:最受关注的列表的名称是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT list_title\nFROM lists\nORDER BY list_followers DESC\nLIMIT 1;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:关注者在1-2之间的列表的Mubi上的列表页面的URL是什么，其上次更新时间戳是在2012年？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT list_url, list_update_timestamp_utc\nFROM lists\nWHERE list_followers BETWEEN 1 AND 2\n  AND YEAR(list_update_timestamp_utc) = 2012;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户85981819首先创建的列表ID是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT list_id \nFROM lists \nWHERE user_id = 85981819 \nORDER BY list_creation_timestamp_utc ASC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于电影id 1269，有多少用户是付费用户，当他对电影进行评分时有资格试用，他们给电影的评分小于或等于2？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM ratings \nWHERE movie_id = 1269 \n  AND rating_score <= 2 \n  AND user_subscriber = 1 \n  AND user_eligible_for_trial = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:史蒂文·斯皮尔伯格执导的2021年上映的电影受欢迎程度如何？列出电影的名称及其相应的受欢迎程度。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, m.movie_popularity\nFROM movies m\nWHERE m.director_name = '史蒂文·斯皮尔伯格' AND m.movie_release_year = 2021;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:第一部电影是什么时候上映的，是谁导演的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie_release_year, director_name\nFROM movies\nORDER BY movie_release_year ASC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户的用户ID是什么？他创建列表时是订阅者，连续10年创建列表？如果有多个用户，请指明每个用户的用户ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.user_id\nFROM lists_users l\nWHERE l.user_subscriber = 1\nGROUP BY l.user_id\nHAVING COUNT(DISTINCT YEAR(l.list_creation_date_utc)) = 10\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少用户给《帕维·拉奇恩：旅行家女孩》这部电影的评分是4分？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*)\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = '帕维·拉奇恩：旅行家女孩' AND ratings.rating_score = 4;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:创建“二战与儿童”列表的用户在创建该列表时是否有资格试用？说明上述列表有多少关注者。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.list_followers, lu.user_eligible_for_trial\nFROM lists l\nJOIN lists_users lu ON l.list_id = lu.list_id\nWHERE l.list_title = '二战与儿童' AND l.list_creation_timestamp_utc = lu.list_creation_date_utc;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:昆汀·塔伦蒂诺执导的第三部电影是哪一年上映的？指示给它打分为4的用户的用户ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.user_id\nFROM (\n    SELECT m.movie_id, m.movie_release_year\n    FROM movies m\n    WHERE m.director_name = 'Quentin Tarantino'\n    ORDER BY m.movie_release_year\n    LIMIT 2, 1\n) AS third_movie\nJOIN ratings r ON third_movie.movie_id = r.movie_id\nWHERE r.rating_score = 4;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Mubi上的电影导演页面的URL是什么？该导演的电影被用户2452551评为评论家，并获得了39个赞？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.director_url\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.user_id = 2452551 AND r.critic = 'critic' AND r.critic_likes = 39;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《我什么时候会被爱》的平均评分是多少？谁是导演？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(rating_score) AS average_rating, director_name\nFROM movies\nLEFT JOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE movie_title = '我什么时候会被爱';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少部电影被添加到电影数量最多的列表中？指示用户创建列表时是否为付费订阅者。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT list_movie_number FROM lists ORDER BY list_movie_number DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:影评人获得与影评人相关的最高点赞数的电影的名字是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.critic = 1\nORDER BY r.critic_likes DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:这部在1920年至1929年间最受欢迎的电影的受欢迎程度是多少？这部电影何时从付费用户那里获得了第一个1分的评分？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    m.movie_popularity,\n    MIN(r.rating_timestamp_utc) as first_one_star_rating_time\nFROM \n    movies m\nJOIN \n    ratings r ON m.movie_id = r.movie_id\nWHERE \n    m.movie_release_year BETWEEN 1920 AND 1929\n    AND r.rating_score = 1\n    AND r.user_subscriber = 1\nGROUP BY \n    m.movie_id\nORDER BY \n    m.movie_popularity DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:弗朗西斯·福特·科波拉执导的电影中有多少部的人气超过1000？如果有的话，请说明每部电影的每位评论家获得的最高点赞量。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, MAX(r.critic_likes) AS max_critic_likes\nFROM movies AS m\nJOIN ratings AS r ON m.movie_id = r.movie_id\nWHERE m.director_name = 'Francis Ford Coppola' AND m.movie_popularity > 1000\nGROUP BY m.movie_title;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2020年4月19日给电影id 1103打5分的用户的Mubi上的用户档案图像的URL是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT ru.user_avatar_image_url\nFROM ratings_users AS ru\nJOIN ratings AS r ON ru.user_id = r.user_id\nWHERE r.movie_id = 1103\nAND r.rating_score = 5\nAND DATE(r.rating_timestamp_utc) = '2020-04-19';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在用户4208563创建的列表中，哪一个拥有最多的关注者？指示它有多少关注者，以及用户创建列表时是否为订阅者。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.list_id, l.list_followers, lu.user_subscriber\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id\nWHERE l.user_id = 4208563\nORDER BY l.list_followers DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪一年上映的电影数量最少，评分最高的一年的电影名称是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN (\n    SELECT movie_release_year\n    FROM movies\n    GROUP BY movie_release_year\n    ORDER BY COUNT(*) ASC, AVG((SELECT AVG(rating_score) FROM ratings WHERE movie_id = movies.movie_id)) DESC\n    LIMIT 1\n) AS subq ON m.movie_release_year = subq.movie_release_year\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少用户在给这部1924年上映、由埃里希·冯·斯特罗海姆执导的电影打分时是付费用户，他们给这部电影打分为5分？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT r.user_id)\nFROM ratings AS r\nJOIN movies AS m ON r.movie_id = m.movie_id\nWHERE m.movie_release_year = 1924\nAND m.director_name = '埃里希·冯·斯特罗海姆'\nAND r.rating_score = 5\nAND r.user_subscriber = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:添加到用户8516503列表中的电影平均数量是多少？在Mubi上提供用户配置文件图像的URL。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(list_movie_number) FROM lists WHERE user_id = 8516503;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少用户对电影《了不起的安伯逊》的评分不超过2分？列出Mubi上评分的所有URL。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT r.user_id)\nFROM ratings AS r\nJOIN movies AS m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '了不起的安伯逊' AND r.rating_score <= 2;\n\nSELECT DISTINCT rating_url\nFROM ratings;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少在2016年2月创建列表的用户在创建列表时有资格试用？指出2016年2月在其列表中拥有最多关注者的用户的用户id。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT user_id\nFROM lists\nWHERE list_creation_timestamp_utc BETWEEN '2016-02-01 00:00:00' AND '2016-02-29 23:59:59'\nAND user_id IN (\n    SELECT user_id\n    FROM ratings_users\n    WHERE user_eligible_for_trial = 1\n)\nORDER BY list_followers DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户22030372给出的评分最高的《Riff Raff》电影在Mubi上的评分URL是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.rating_url\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE r.user_id = 22030372 AND m.movie_title = 'Riff Raff'\nORDER BY r.rating_score DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:从1960年到1985年，有多少导演执导过至少10部电影？注明每一位获得5分最高评分的导演当年的电影名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    d.director_id,\n    d.director_name,\n    m.movie_title\nFROM\n    (SELECT \n        director_id, director_name\n    FROM\n        movies\n    WHERE\n        movie_release_year BETWEEN 1960 AND 1985\n    GROUP BY director_id\n    HAVING COUNT(movie_id) >= 10) AS d\nJOIN\n    movies AS m ON d.director_id = m.director_id\nJOIN\n    ratings AS r ON m.movie_id = r.movie_id\nWHERE\n    r.rating_score = 5\n    AND m.movie_release_year BETWEEN 1960 AND 1985;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少用户在对这部电影进行评分时不是试验名单，他们给这部电影《南方》的评分不超过2分？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT r.user_id)\nFROM ratings AS r\nJOIN movies AS m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '南方'\nAND r.rating_score <= 2\nAND r.user_trialist = 0;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《现代启示录》的影评人给这部电影打了5分后，获得了多少个赞？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT critic_likes\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movie_title = '现代启示录' AND rating_score = 5 AND critic = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《人潮汹涌》的平均评分是多少？谁是导演？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(rating_score) AS average_rating, director_name\nFROM movies\nLEFT JOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE movie_title = '人潮汹涌';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:导演执导电影数量最多的导演的第一部电影是什么时候上映的？获得与评论家相关评论数量最多的用户的用户id是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\n-- 查询执导电影数量最多的导演的第一部电影上映时间\nSELECT MIN(m.movie_release_year) AS first_movie_release_year\nFROM movies m\nJOIN (\n    SELECT director_id\n    FROM movies\n    GROUP BY director_id\n    ORDER BY COUNT(movie_id) DESC\n    LIMIT 1\n) AS d ON m.director_id = d.director_id;\n\n-- 查询获得与评论家相关评论数量最多的用户的用户id\nSELECT r.user_id\nFROM ratings r\nWHERE critic = 1\nGROUP BY r.user_id\nORDER BY COUNT(rating_id) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少电影的受欢迎程度超过400但低于500？指明电影的名称以及每部电影获得的最高评分。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, MAX(r.rating_score) as highest_rating\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.movie_popularity > 400 AND m.movie_popularity < 500\nGROUP BY m.movie_title;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户45579900为获得20个赞的电影《太阳的垂直光线》在Mubi上的评分URL是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.rating_url\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE r.user_id = 45579900\n  AND m.movie_title = '太阳的垂直光线'\n  AND r.critic_likes >= 20;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:克里斯托弗·诺兰执导的每部电影的平均受欢迎程度是多少？指出哪部由他执导的电影获得了最高的5分评分。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    AVG(m.movie_popularity) AS average_popularity,\n    m2.movie_title AS highest_rated_movie\nFROM \n    movies m\nJOIN (\n    SELECT \n        movie_id, \n        movie_title\n    FROM \n        movies m\n    INNER JOIN ratings r ON m.movie_id = r.movie_id\n    WHERE \n        m.director_name = '克里斯托弗·诺兰' AND r.rating_score = 5\n    ORDER BY r.rating_score DESC\n    LIMIT 1\n) AS m2 ON m.director_id = m2.movie_id\nWHERE \n    m.director_name = '克里斯托弗·诺兰';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2013年1月1日至2013年12月31日期间，创建“100位在世最伟大的美国电影制作人”名单的用户对这部电影的名字进行了评分？计算2013年这些电影的平均评分。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(r.rating_score) AS average_rating\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nJOIN lists_users lu ON r.user_id = lu.user_id\nJOIN lists l ON lu.list_id = l.list_id\nWHERE l.list_title = '100位在世最伟大的美国电影制作人'\nAND r.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31'\nAND m.movie_release_year = 2013;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:《帕维·拉基恩：旅行女孩》这部电影的平均评分是多少？它是在哪一年上映的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(r.rating_score) AS average_rating, m.movie_release_year\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.movie_title = '帕维·拉基恩：旅行女孩';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少电影列表在创建10年后仍在更新？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM lists \nWHERE list_update_timestamp_utc > DATE_ADD(list_creation_timestamp_utc, INTERVAL 10 YEAR);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影单“又短又甜”是怎么描述的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT list_description FROM lists WHERE list_title = '又短又甜';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:我在哪里可以找到电影列表“又短又甜”？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT * FROM lists WHERE list_title = '又短又甜';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2010/1/1之后创建的电影列表中，有多少拥有超过200名粉丝？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*)\nFROM lists\nWHERE list_creation_timestamp_utc > '2010-01-01 00:00:00'\nAND list_followers > 200;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户83373278在订阅时创建了多少电影列表？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM lists WHERE user_id = 83373278;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《La Antena》是在哪一年上映的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请给我电影“La Antena”的网址。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT movie_url FROM movies WHERE movie_title = 'La Antena';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪部电影更受欢迎，《将军》还是《格里多》？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n  (SELECT movie_popularity FROM movies WHERE movie_title = '将军') AS Popularity_JiangJun,\n  (SELECT movie_popularity FROM movies WHERE movie_title = '格里多') AS Popularity_GeLiDuo;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在Mubi上注册的电影有多少是洪相洙导演的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movies WHERE director_name = '洪相洙';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:创建“250部最喜爱的电影”列表的用户在创建列表时是否为试用列表？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT lu.user_trialist\nFROM lists l\nJOIN lists_users lu ON l.list_id = lu.list_id\nWHERE l.list_title = '250部最喜爱的电影'\nAND l.list_movie_number = 250\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出用户32172230在有资格试用时创建的电影列表的标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.list_title\nFROM lists l\nJOIN lists_users lu ON l.list_id = lu.list_id\nWHERE lu.user_id = 32172230 AND lu.user_eligible_for_trial = 1 AND l.list_creation_timestamp_utc = lu.list_creation_date_utc;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:当用户85981819是付费用户时，他或她创建了多少个超过100部电影的电影列表？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*)\nFROM lists\nJOIN ratings_users ON lists.user_id = ratings_users.user_id\nWHERE lists.user_id = 85981819\nAND ratings_users.user_subscriber = TRUE\nAND lists.list_movie_number > 100;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户85981819拥有最多粉丝的电影列表是如何描述的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.list_title, l.list_movie_number, l.list_followers, l.list_description\nFROM lists l\nWHERE l.user_id = 85981819\nORDER BY l.list_followers DESC;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:“250部最受欢迎电影”名单的创建者上一次更新电影名单是什么时候？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT MAX(list_update_timestamp_utc) AS last_update_time\nFROM lists\nWHERE list_title = '250部最受欢迎电影';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:创建电影列表“250部最喜欢的电影”的用户的头像是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT ratings_users.user_avatar_image_url\nFROM lists\nJOIN ratings_users ON lists.user_id = ratings_users.user_id\nWHERE lists.list_title = '250部最喜欢的电影';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:创建电影列表“250部最喜欢的电影”的用户又创建了多少个电影列表？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT list_id) - 1 AS additional_lists_created\nFROM lists\nWHERE user_id = (\n    SELECT user_id\n    FROM lists\n    WHERE list_title = '250部最喜欢的电影'\n);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少用户最喜欢电影《生活的方式》？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT user_id) \nFROM ratings \nJOIN movies ON ratings.movie_id = movies.movie_id \nWHERE movies.movie_title = '生活的方式' AND ratings.rating_score = (SELECT MAX(rating_score) FROM ratings);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出用户对电影《一种生活方式》的评价。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.user_id, r.rating_score, r.rating_comments\nFROM ratings AS r\nJOIN movies AS m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '一种生活方式';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少影评人对《模仿生活》的评价超过了1分？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT r.user_id)\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '模仿生活' AND r.rating_score > 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个用户为电影《我什么时候会被爱》做了评论家，并获得了2条评论？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.user_id\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '我什么时候会被爱' AND r.critic = 1 AND r.critic_comments >= 2;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:39115684用户是什么时候评价电影《生活方式》的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT rating_timestamp_utc \nFROM ratings \nJOIN movies ON ratings.movie_id = movies.movie_id \nWHERE ratings.user_id = 39115684 AND movies.movie_title = '生活方式';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户39115684对电影《我什么时候会被爱》的评分是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT rating_score\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE user_id = 39115684 AND movie_title = '我什么时候会被爱';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户39115684在为电影《生活方式》打分时，是否是一名试用者？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.user_trialist\nFROM ratings AS r\nJOIN movies AS m ON r.movie_id = m.movie_id\nWHERE r.user_id = 39115684 AND m.movie_title = '生活方式';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少用户在对电影《生活方式》进行评分时被列入了试用名单？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT r.user_id) \nFROM ratings AS r \nJOIN movies AS m ON r.movie_id = m.movie_id \nWHERE m.movie_title = '生活方式' AND r.user_trialist = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请与评论家一起列出电影《生活方式》的所有评分链接。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.rating_url\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '生活方式' AND r.critic = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少用户对最受欢迎的电影进行了评分？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT ratings.user_id) \nFROM ratings \nJOIN (\n    SELECT movie_id \n    FROM ratings \n    GROUP BY movie_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n) AS most_popular_movie ON ratings.movie_id = most_popular_movie.movie_id;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户58149469的影评人在哪部电影上获得了1个赞和2个评论？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.user_id = 58149469 AND r.critic_likes = 1 AND r.critic_comments = 2;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在对电影《我什么时候会被爱》进行评分的用户中，有多少人对这部电影的评分为“1”？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM ratings \nJOIN movies ON ratings.movie_id = movies.movie_id \nWHERE movies.movie_title = '我什么时候会被爱' AND ratings.rating_score = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2011年之后，电影《生活方式》的收视率是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(rating_score) AS average_rating\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE movie_title = '生活方式'\nAND movie_release_year > 2011\nAND rating_timestamp_utc > '2011-01-01 00:00:00';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:创建电影列表“250部最受欢迎电影”的用户对电影《无罪无保护》的评分是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT r.rating_score\nFROM ratings AS r\nJOIN movies AS m ON r.movie_id = m.movie_id\nJOIN lists_users AS lu ON r.user_id = lu.user_id\nJOIN lists AS l ON lu.list_id = l.list_id\nWHERE l.list_title = '250部最受欢迎电影' AND m.movie_title = '无罪无保护';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出创建电影列表“250部最喜爱的电影”的用户所评定的电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_id, m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nJOIN lists l ON l.user_id = r.user_id\nWHERE l.list_title = '250部最喜爱的电影';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《生活方式》的平均评分是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT AVG(rating_score) AS average_rating\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE movie_title = '生活方式';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《我什么时候会被爱》的评分为“1”的用户比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    (COUNT(CASE WHEN r.rating_score = 1 THEN 1 END) / COUNT(*)) * 100 AS percentage_of_rating_1\nFROM \n    ratings AS r\nJOIN \n    movies AS m ON r.movie_id = m.movie_id\nWHERE \n    m.movie_title = '我什么时候会被爱';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《无保护的天真》的平均评分比电影《我什么时候会被爱》高多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    (SELECT AVG(rating_score) FROM ratings INNER JOIN movies ON ratings.movie_id = movies.movie_id WHERE movie_title = '无保护的天真') - \n    (SELECT AVG(rating_score) FROM ratings INNER JOIN movies ON ratings.movie_id = movies.movie_id WHERE movie_title = '我什么时候会被爱') AS average_score_difference;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁是电影《东京眼》的导演\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT director_name FROM movies WHERE movie_title = '东京眼';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2007年上映了多少部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT COUNT(*) FROM movies WHERE movie_release_year = 2007;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2006年上映的电影中，哪部最受Mubi用户欢迎？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.movie_release_year = 2006\nGROUP BY m.movie_id\nORDER BY AVG(r.rating_score) DESC, COUNT(r.rating_id) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:ÅkeSandgren导演了多少部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movies WHERE director_name = 'Åke Sandgren';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Álex de la Iclesia执导的哪部电影最受Mubi用户欢迎？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.director_name = 'Álex de la Iglesia'\nORDER BY r.rating_score DESC, COUNT(r.rating_id) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《警察》是什么时候上映的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie_release_year FROM movies WHERE movie_title = '警察';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出电影《冬天来了》导演的身份证。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT director_id FROM movies WHERE movie_title = '冬天来了';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请提供列表中关注人数最多的用户的ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT user_id FROM lists ORDER BY list_followers DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请提供列表标题以及列表中评论最多的内容。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT list_title, list_comments\nFROM lists\nORDER BY list_comments DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2008年上映的哪部电影得分最高？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT m.movie_title, MAX(r.rating_score) AS highest_score\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.movie_release_year = 2008\nGROUP BY m.movie_title\nORDER BY highest_score DESC\nLIMIT 1;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出与影评人相关的点赞数中排名前三的电影名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.critic = 1\nGROUP BY m.movie_id\nORDER BY SUM(r.critic_likes) DESC\nLIMIT 3;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2009年用户创建的列表中，有多少用户拥有超过100名粉丝？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT l.user_id)\nFROM lists l\nWHERE l.list_creation_timestamp_utc BETWEEN '2009-01-01 00:00:00' AND '2009-12-31 23:59:59'\nAND l.list_followers > 100;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Mubi有多少用户给电影《5个人的白夜婚礼》打分？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT ratings.user_id)\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = '5个人的白夜婚礼';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:创建电影列表“乔治亚州相关电影”的用户的封面图片是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT l.list_cover_image_url\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id\nWHERE l.list_title = '乔治亚州相关电影';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:user_avatar_image_url所在的用户创建的列表有多少关注者https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214有\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT SUM(list_followers) \nFROM lists \nJOIN ratings_users ON lists.user_id = ratings_users.user_id \nWHERE ratings_users.user_avatar_image_url = 'https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出用户94978评分为5分的电影名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.user_id = 94978 AND r.rating_score = 5;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出用户2941评分的电影中2003年上映的电影名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.user_id = 2941 AND m.movie_release_year = 2003;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少用户在给电影《帕蒂·史密斯：人生之梦》打分时不是试镜者？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT r.user_id)\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '帕蒂·史密斯：人生之梦' AND r.user_trialist = 0;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪部电影的平均分在木比最高？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nGROUP BY m.movie_id\nORDER BY AVG(r.rating_score) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请在用户对电影进行评分时，在与评论家相关的评论数量中列出前三部电影的名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.critic = 1\nGROUP BY m.movie_id\nORDER BY COUNT(r.rating_id) DESC\nLIMIT 3;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户85981819创建的第一个列表的标题是什么？请提供user_avatar_image_url。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.list_title, ru.user_avatar_image_url\nFROM lists l\nJOIN ratings_users ru ON l.user_id = ru.user_id\nWHERE l.user_id = 85981819\nORDER BY l.list_creation_timestamp_utc ASC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出2020年被评次数最多的电影的名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE YEAR(FROM_UNIXTIME(r.rating_timestamp_utc)) = 2020\nGROUP BY m.movie_id\nORDER BY COUNT(r.rating_id) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《凡尔赛河》的平均分是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT AVG(rating_score) AS average_score\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE movie_title = '凡尔赛河';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪部电影被用户59988436评为21条评论？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.user_id = 59988436 AND r.critic_comments = 21;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出获得20多个赞的电影的名字？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nGROUP BY m.movie_id\nHAVING SUM(r.critic_likes) > 20",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2019年电影《柏林沦陷》的平均分是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(rating_score) AS average_rating\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movie_title = '柏林沦陷' AND movie_release_year = 2019;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:百分之多少的用户对电影《帕蒂·史密斯：人生之梦》的评分超过3？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT ROUND(\n    (SELECT COUNT(*) FROM ratings\n     JOIN movies ON ratings.movie_id = movies.movie_id\n     WHERE movies.movie_title = '帕蒂·史密斯：人生之梦' AND ratings.rating_score > 3)\n    /\n    (SELECT COUNT(DISTINCT user_id) FROM ratings\n     JOIN movies ON ratings.movie_id = movies.movie_id\n     WHERE movies.movie_title = '帕蒂·史密斯：人生之梦') * 100, 2) AS percentage_of_users_with_rating_over_3;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:导演阿巴斯·基亚罗斯塔米执导的哪部电影的平均分最高？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.director_name = '阿巴斯·基亚罗斯塔米'\nGROUP BY m.movie_id\nORDER BY AVG(r.rating_score) DESC\nLIMIT 1;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪一年上映的电影最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie_release_year, COUNT(*) AS movies_count\nFROM movies\nGROUP BY movie_release_year\nORDER BY movies_count DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁是拍电影最多的导演？给导演身份证。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT director_id, COUNT(*) AS movie_count\nFROM movies\nGROUP BY director_id\nORDER BY movie_count DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:这位电影人气最高的导演拍了多少部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT director_name, COUNT(movie_id) AS number_of_movies\nFROM movies\nGROUP BY director_id\nORDER BY SUM(movie_popularity) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2014年之后给一部电影打分时，付费用户的数量是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT user_id) \nFROM ratings \nWHERE rating_timestamp_utc >= '2014-01-01 00:00:00' AND user_subscriber = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁是最早创建列表但没有得到任何关注的用户？提供用户ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT user_id \nFROM lists \nWHERE list_followers = 0 \nORDER BY list_creation_timestamp_utc \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:给出发布列表最多的用户的关注者数量。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT MAX(list_followers) AS max_followers\nFROM lists\nWHERE user_id = (\n    SELECT user_id\n    FROM lists\n    GROUP BY user_id\n    ORDER BY COUNT(list_id) DESC\n    LIMIT 1\n);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:发布“关于二战的非美国电影”列表的用户有多少粉丝？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.list_followers\nFROM lists l\nJOIN lists_users lu ON l.list_id = lu.list_id\nJOIN movies m ON l.list_id = m.movie_id\nWHERE l.list_title LIKE '%二战%'\nAND m.movie_title_language != 'English'\nAND m.movie_release_year < 1945;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少用户给电影《坠落》的评分是“4”？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = '坠落' AND ratings.rating_score = 4;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请说出收视率最高的电影的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie_title\nFROM movies\nORDER BY movie_popularity DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪部电影获得了最多的评论？说出电影的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nGROUP BY m.movie_id\nORDER BY COUNT(r.rating_id) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:显示在2019/10/17 1:36:36给出评分的用户的头像。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT user_avatar_image_url\nFROM ratings_users\nWHERE rating_date_utc = '2019-10-17 01:36:36';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:显示创建列表的用户“Vladimir Vladimirovich Nabokov”的肖像图片。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT user_avatar_image_url FROM lists_users WHERE user_id = (SELECT user_id FROM lists_users WHERE CONCAT(user_id, ' ', user_id, ' ', user_id) = 'Vladimir Vladimirovich Nabokov')",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于发布包含最多电影的列表的用户，在创建该列表时，他/她是付费订户吗？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT lu.user_subscriber\nFROM lists_users lu\nINNER JOIN (\n    SELECT l.user_id, MAX(l.list_movie_number) as max_movies\n    FROM lists l\n    GROUP BY l.user_id\n    ORDER BY max_movies DESC\n    LIMIT 1\n) as max_user ON lu.user_id = max_user.user_id\nWHERE lu.list_creation_date_utc = (\n    SELECT list_creation_date_utc\n    FROM lists\n    WHERE user_id = max_user.user_id\n    ORDER BY list_movie_number DESC\n    LIMIT 1\n)\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:显示给予最多“5”分的用户的头像。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT ru.user_avatar_image_url\nFROM ratings_users ru\nJOIN ratings r ON ru.user_id = r.user_id\nWHERE r.rating_score = 5\nGROUP BY ru.user_id\nHAVING COUNT(r.rating_id) = (SELECT MAX(rating_count) FROM (SELECT user_id, COUNT(rating_id) as rating_count FROM ratings WHERE rating_score = 5 GROUP BY user_id) as subquery);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少评论家对这部电影评价最高。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT COUNT(DISTINCT user_id) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = '这部电影') AND rating_score = (SELECT MAX(rating_score) FROM ratings);",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁在2013/5/4 6:33:32给电影《怪胎》打了“4”分？提供他/她的用户id。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.user_id\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '怪胎'\nAND r.rating_score = 4\nAND r.rating_timestamp_utc = '2013-05-04 06:33:32';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:给出电影的url，该电影在2013/5/3 5:11:17上被评为5。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_url\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_score = 5\nAND r.rating_timestamp_utc = '2013-05-03 05:11:17';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于1998年最受欢迎的电影来说，这部电影获得了多少“4”级评价？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) AS num_ratings_with_score_4\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_release_year = 1998 AND ratings.rating_score = 4\nORDER BY movies.movie_popularity DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在所有受欢迎度超过13000的电影中，哪一部的收视率最低。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie_title \nFROM movies AS m \nJOIN ratings AS r ON m.movie_id = r.movie_id \nWHERE movie_popularity > 13000 \nORDER BY rating_score ASC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少付费用户给电影《飞越杜鹃窝》打分？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT ratings.user_id)\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = '飞越杜鹃窝' AND ratings.user_subscriber = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于拥有3000多名粉丝的列表，创建这些列表的用户中有多少是付费用户？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT l.user_id) \nFROM lists l\nJOIN ratings_users ru ON l.user_id = ru.user_id\nWHERE l.list_followers > 3000 AND ru.user_subscriber = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:1988年哪部电影的收视率最高？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie_title, MAX(rating_score) AS highest_rating\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE movie_release_year = 1988\nGROUP BY movies.movie_id\nORDER BY highest_rating DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在1995年上映的所有电影中，最受欢迎的电影有多少收视率低于3？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM movies \nJOIN ratings ON movies.movie_id = ratings.movie_id \nWHERE movies.movie_release_year = 1995 AND ratings.rating_score < 3 AND movies.movie_popularity = (\n    SELECT MAX(movie_popularity) \n    FROM movies \n    WHERE movie_release_year = 1995\n);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:给电影《Go Go Tales》打“5”分的用户比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ROUND((SUM(rating_score = 5) / COUNT(*)) * 100, 2) AS percentage_of_5_star_ratings\nFROM \n    ratings\nJOIN \n    movies ON ratings.movie_id = movies.movie_id\nWHERE \n    movies.movie_title = 'Go Go Tales';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:给出给电影“G.I.Jane”打分的订阅者的百分比。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT ROUND(\n    (SELECT COUNT(DISTINCT ru.user_id)\n     FROM ratings_users ru\n     JOIN ratings r ON ru.user_id = r.user_id\n     JOIN movies m ON r.movie_id = m.movie_id\n     WHERE m.movie_title = 'G.I.Jane' AND ru.user_subscriber = 1) /\n    (SELECT COUNT(*)\n     FROM ratings_users\n     WHERE user_subscriber = 1) * 100, 2) AS subscriber_percentage;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于所有给《黑暗中的一枪》打分的用户，他们中有多少%是付费用户？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT ROUND(SUM(user_subscriber) / COUNT(*) * 100, 2) AS percentage_of_paying_users\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = '黑暗中的一枪';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:命名用户4208563创建的所有列表标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT list_title FROM lists WHERE user_id = 4208563;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2016年创建的列表中，这是最近更新的列表。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT * FROM lists \nWHERE YEAR(list_creation_timestamp_utc) = 2016 \nORDER BY list_update_timestamp_utc DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:当用户创建列表时，作为订阅者的用户创建的列表的百分比是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    (SELECT COUNT(DISTINCT l.user_id) FROM lists l\n     INNER JOIN ratings_users ru ON l.user_id = ru.user_id\n     WHERE ru.user_subscriber = 1) / \n    COUNT(DISTINCT user_id) * 100 AS subscriber_list_creation_percentage\nFROM lists;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:命名创建列表时作为子用户的用户创建的所有列表。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.*\nFROM lists l\nJOIN lists_users lu ON l.list_id = lu.list_id\nWHERE lu.user_id != l.user_id;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供用户创建列表时有资格试用的列表标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT list_title\nFROM lists\nJOIN ratings_users ON lists.user_id = ratings_users.user_id\nWHERE ratings_users.user_eligible_for_trial = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在至少有一个追随者的列表中，有多少是由创建列表时作为订阅者的用户创建的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT l.list_id)\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id AND lu.user_subscriber = TRUE\nWHERE l.list_followers > 0;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于所有列表中至少有200部电影的电影，它们的平均粉丝数量是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(list_followers) AS average_fans\nFROM lists\nWHERE list_movie_number >= 200;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出用户创建列表时作为订阅用户创建的所有标题，并且列表中的电影少于50部。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.list_title\nFROM lists l\nJOIN lists_users lu ON l.list_id = lu.list_id\nWHERE lu.user_subscriber = 1 AND l.list_movie_number < 50;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个标题列表最长时间没有更新？说明有多长时间没有更新？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT list_title, DATEDIFF(CURRENT_DATE, FROM_UNIXTIME(list_update_timestamp_utc)) AS days_since_last_update\nFROM lists\nORDER BY list_update_timestamp_utc ASC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:创建名为“声音和视觉”的列表的用户是谁？当他创建列表时，他是不是一个订阅用户？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.user_id, lu.user_subscriber\nFROM lists l\nJOIN lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id\nWHERE l.list_title = '声音和视觉'\nORDER BY l.list_creation_timestamp_utc\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于拥有200多名粉丝的列表，请说明标题以及列表创建的时间？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT list_title, list_creation_timestamp_utc\nFROM lists\nWHERE list_followers > 200;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在列表中的所有电影中，计算从未被评分的电影的百分比？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT (COUNT(DISTINCT m.movie_id) - COUNT(DISTINCT r.movie_id)) / COUNT(DISTINCT m.movie_id) * 100 AS percentage_of_movies_never_rated\nFROM movies m\nLEFT JOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.movie_id IS NULL;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出用户39115684评定的所有电影。说明标题、评分日期和评分分数。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, r.rating_timestamp_utc AS rating_date, r.rating_score\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE r.user_id = 39115684;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:从1970年到1980年，有多少部电影的受欢迎程度超过11000？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movies WHERE movie_release_year BETWEEN 1970 AND 1980 AND movie_popularity > 11000;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:1976年，费利佩·卡扎尔斯执导了多少部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movies WHERE director_name = '费利佩·卡扎尔斯' AND movie_release_year = 1976;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:这部名为《美国红女孩》的电影在Mubi上的导演页面的URL是什么\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT director_url FROM movies WHERE movie_title = '美国红女孩';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:最近更新的列表的名称是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT list_title FROM lists ORDER BY list_update_timestamp_utc DESC LIMIT 1;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁创建了这个有142条评论的列表？指明用户的用户id，如果有多个列表，有142条评论，则列出创建该列表的人的用户id\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.user_id\nFROM lists l\nWHERE l.list_comments = 142;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Jeannot Szwarc最受欢迎的电影是什么？它的平均评分是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, AVG(r.rating_score) as average_rating\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.director_name = 'Jeannot Szwarc'\nGROUP BY m.movie_title\nORDER BY average_rating DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁是70年代导演电影数量最多的导演？如果有多个导演的电影数量相同，请列出他们的所有名字，并指出这些电影从用户那里获得的最高评分。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT director_name, MAX(highest_rating) AS highest_rating\nFROM (\n    SELECT director_name, COUNT(movie_id) AS movie_count, MAX(rating_score) AS highest_rating\n    FROM movies\n    LEFT JOIN ratings ON movies.movie_id = ratings.movie_id\n    WHERE movie_release_year BETWEEN 1970 AND 1979\n    GROUP BY director_name\n) AS director_movie_count\nGROUP BY movie_count\nORDER BY movie_count DESC, highest_rating DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2010年1月1日至2020年12月31日期间，有多少用户在创建列表时是试用者，他们给电影《文字的秘密生活》的评分为3分？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT r.user_id)\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nJOIN lists_users lu ON r.user_id = lu.user_id\nWHERE m.movie_title = '文字的秘密生活'\nAND r.rating_score = 3\nAND lu.user_trialist = TRUE\nAND lu.list_creation_date_utc BETWEEN '2010-01-01' AND '2020-12-31';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:评论家点赞量最高的电影叫什么名字？指示Mubi上评级的URL。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, r.rating_url\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.critic = 1\nORDER BY r.critic_likes DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:21世纪最受欢迎的五部电影是什么？指出有多少用户给了它5分的评分。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_title, COUNT(*) as five_star_ratings\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.rating_score = 5\nGROUP BY m.movie_id\nORDER BY five_star_ratings DESC, m.movie_popularity DESC\nLIMIT 5;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2011年3月27日凌晨2:06:34对电影《帕维·拉奇恩：旅行家女孩》进行评分的用户创建的列表的平均关注人数是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(l.list_followers) AS average_list_followers\nFROM lists l\nJOIN ratings r ON l.user_id = r.user_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '帕维·拉奇恩：旅行家女孩'\nAND r.rating_timestamp_utc = '2011-03-27 02:06:34'\nAND l.list_creation_timestamp_utc <= '2011-03-27 02:06:34';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2017年1月1日至2017年12月31日期间，有多少用户在对电影《帕蒂·史密斯：梦想人生》进行评分时有资格进行试用？Mubi上这部电影的图像URL是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT r.user_id) AS eligible_trialist_count, m.movie_image_url\nFROM ratings r\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE m.movie_title = '帕蒂·史密斯：梦想人生'\nAND r.rating_timestamp_utc BETWEEN '2017-01-01' AND '2017-12-31'\nAND r.user_eligible_for_trial = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:添加到用户8516503的列表中的电影平均数量是多少？指出他/她给了多少部电影5分的评分。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(list_movie_number) AS average_movies_added, \n       SUM(CASE WHEN rating_score = 5 THEN 1 ELSE 0 END) AS five_star_ratings\nFROM lists\nLEFT JOIN ratings ON lists.user_id = ratings.user_id\nWHERE lists.user_id = 8516503;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:这部有史以来最受欢迎的电影的导演是谁？它是什么时候上映的？指示试用列表中用户对电影进行评分时的平均评分。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.director_name, m.movie_release_year, AVG(r.rating_score) as average_rating\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nGROUP BY m.movie_id\nORDER BY m.movie_popularity DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户57756708最近对这部电影的评分是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "SELECT rating_score\nFROM ratings\nWHERE user_id = 57756708 AND movie_id = (SELECT movie_id FROM movies WHERE movie_title = '这部电影')\nORDER BY rating_timestamp_utc DESC\nLIMIT 1;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:前十部最古老的电影是什么？每部电影的平均评分是多少？注明导演的姓名以及电影上映的时间。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'lists': {'数据项': ['user_id', 'list_id', 'list_title', 'list_movie_number', 'list_update_timestamp_utc', 'list_creation_timestamp_utc', 'list_followers', 'list_url', 'list_comments', 'list_description', 'list_cover_image_url', 'list_first_image_url', 'list_second_image_url', 'list_third_image_url']}, 'movies': {'数据项': ['movie_id', 'movie_title', 'movie_release_year', 'movie_url', 'movie_title_language', 'movie_popularity', 'movie_image_url', 'director_id', 'director_name', 'director_url']}, 'ratings_users': {'数据项': ['user_id', 'rating_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'lists_users': {'数据项': ['user_id', 'list_id', 'list_update_date_utc', 'list_creation_date_utc', 'user_trialist', 'user_subscriber', 'user_avatar_image_url', 'user_cover_image_url', 'user_eligible_for_trial', 'user_has_payment_method']}, 'ratings': {'数据项': ['movie_id', 'rating_id', 'rating_url', 'rating_score', 'rating_timestamp_utc', 'critic', 'critic_likes', 'critic_comments', 'user_id', 'user_trialist', 'user_subscriber', 'user_eligible_for_trial', 'user_has_payment_method']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    m.movie_title,\n    AVG(r.rating_score) AS average_rating,\n    m.director_name,\n    m.movie_release_year\nFROM \n    movies m\nLEFT JOIN \n    ratings r ON m.movie_id = r.movie_id\nGROUP BY \n    m.movie_id\nORDER BY \n    m.movie_release_year ASC, \n    m.movie_id ASC\nLIMIT 10;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个日期的订单数量最多？当天的总订单量是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT order_date, COUNT(*) AS total_orders\nFROM sales\nGROUP BY order_date\nORDER BY total_orders DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:1992年订购量最多的题目是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nWHERE YEAR(s.order_date) = 1992\nGROUP BY t.title\nORDER BY SUM(s.quantity) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有带有“开发票”付款条件的销售的标题、价格和发布日期。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, t.price, t.publication_date\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nWHERE s.payterms = '开发票';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:什么是拥有至少10%的特许权使用费而没有最低范围金额的标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title \nFROM titles t \nLEFT JOIN roysched r ON t.title_id = r.title_id \nWHERE t.royalty >= 10 AND r.low_range IS NULL;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说明所有权ID BU2075在10000到50000之间的所有权和使用费百分比。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.title_id, r.low_range, r.high_range, r.royalty\nFROM roysched AS r\nWHERE r.title_id = 'BU2075' AND r.low_range >= 10000 AND r.high_range <= 50000;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在具有版税百分比的标题中，哪个标题的版税百分比最大。说明享受此版税百分比的最低范围。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, r.royalty, r.low_range\nFROM titles t\nJOIN roysched r ON t.title_id = r.title_id\nWHERE r.royalty = (SELECT MAX(royalty) FROM roysched)\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供位于美国的所有出版商的标题列表及其出版商名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, p.publisher_name\nFROM titles t\nJOIN publishers p ON t.publisher_id = p.publisher_id\nWHERE p.country = 'USA';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说明20000范围内的最新年度销售所有权的特许权使用费百分比。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT roysched.royalty\nFROM roysched\nJOIN titles ON roysched.title_id = titles.title_id\nWHERE titles.year_to_date_sales < 20000\nORDER BY titles.year_to_date_sales DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出1991年出版的所有书籍。同时提供标题和出版商名称的注释详细信息。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title AS 'Book Title', p.publisher_name AS 'Publisher Name'\nFROM titles t\nJOIN publishers p ON t.publisher_id = p.publisher_id\nWHERE YEAR(t.publication_date) = 1991;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有销量超过20本的书籍，以及位于加利福尼亚州的商店。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT t.title, s.store_name\nFROM titles t\nJOIN sales sa ON t.title_id = sa.title_id\nJOIN stores s ON sa.store_id = s.store_id\nWHERE t.`year to date sales` > 20 AND s.state = 'CA';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出销售额最高的商店的名字？这家商店的销售额最少的标题是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.store_name, t.title\nFROM stores s\nJOIN sales sa ON s.store_id = sa.store_id\nJOIN titles t ON sa.title_id = t.title_id\nGROUP BY s.store_id\nORDER BY SUM(sa.quantity * t.price) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:为标题ID BU 2075命名标题和发布者。提供所有范围的所有特许权使用费百分比。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, p.publisher name, rs.low range, rs.high range, rs.royalty\nFROM titles t\nJOIN publishers p ON t.publisher id = p.publisher id\nJOIN roysched rs ON t.title id = rs.title_id\nWHERE t.title id = 'BU2075';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用ID 7066命名商店，并计算按“净30”付款条件订购的数量的百分比。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nUPDATE stores SET store name = '7066' WHERE store id = '7066';\n\nSELECT ROUND(\n    (SUM(CASE WHEN payterms = 'Net 30' THEN quantity ELSE 0 END) / SUM(quantity)) * 100, 2) AS net30_percentage\nFROM sales\nWHERE store id = '7066';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说明发布者ID 877的发布者名称？计算其今年迄今的平均销售额。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.publisher_name, AVG(t.price * s.quantity) AS average_sales\nFROM publishers p\nJOIN titles t ON p.publisher_id = t.publisher_id\nJOIN sales s ON t.title_id = s.title_id\nWHERE p.publisher_id = 877 AND YEAR(s.order_date) = YEAR(CURDATE())\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出1990年以前聘用的所有员工的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "SELECT `first name`, `last name` FROM employee WHERE `hire_date` < '1990-01-01';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个员工的工作级别最低。说明其名字、姓氏以及受雇时间。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.first_name, e.last_name, e.hire_date\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nORDER BY j.min_level ASC, e.hire_date\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪一年雇佣的员工最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT YEAR(hire_date) AS hire_year, COUNT(*) AS number_of_hires\nFROM employee\nGROUP BY hire_year\nORDER BY number_of_hires DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有在其职务指定中处于最高级别的员工。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.*\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE e.job_level = j.max_level;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出首席执行官的名字以及他/她被聘用的时间。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "SELECT e.`first name`, e.`last name`, e.`hire_date`\nFROM `employee` e\nJOIN `jobs` j ON e.`job id` = j.`job id`\nWHERE j.`job description` = 'Chief Executive Officer';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:为不在美国的出版商工作的员工是谁？说明员工姓名和发布者姓名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`first name`, e.`last name`, p.`publisher name`\nFROM employee e\nJOIN publishers p ON e.`publisher id` = p.`publisher id`\nWHERE p.`country` <> 'USA';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出为出版商“GGG＆G”工作的所有员工。说明他们的姓名和工作描述。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.first_name, e.last_name, j.job_description\nFROM employee e\nJOIN publishers p ON e.publisher_id = p.publisher_id\nJOIN jobs j ON e.job_id = j.job_id\nWHERE p.publisher_name = 'GGG＆G';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于每个出版商，按照出版商名称的顺序说明他们发布的标题类型。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.publisher_name, t.type\nFROM publishers p\nJOIN titles t ON p.publisher_id = t.publisher_id\nGROUP BY p.publisher_name, t.type\nORDER BY p.publisher_name;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出1991年出版的图书最多的出版商的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.publisher_name\nFROM publishers p\nJOIN titles t ON p.publisher_id = t.publisher_id\nWHERE YEAR(t.publication_date) = 1991\nGROUP BY p.publisher_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出由“Binnet&Hardley”发布的价格最高的标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT title\nFROM titles\nJOIN publishers ON titles.publisher_id = publishers.publisher_id\nWHERE publishers.publisher_name = 'Binnet&Hardley'\nORDER BY price DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在所有员工中，工作级别超过200级的员工。说明员工姓名和工作描述。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`first name`, e.`last name`, j.`job description`\nFROM employee e\nJOIN jobs j ON e.`job id` = j.`job id`\nWHERE e.`job level` > 200;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出所有商业标题的所有作者的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT a.`author first name`, a.`author last name`\nFROM authors a\nJOIN titleauthor ta ON a.`author id` = ta.`author id`\nJOIN titles t ON ta.`title id` = t.`title id`\nWHERE t.`type` = 'business';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有未签订合同的作者的标题和今年迄今为止的销售额。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT a.`author last name`, a.`author first name`, t.title, SUM(s.quantity * t.price) AS sales_amount\nFROM authors a\nJOIN titleauthor ta ON a.`author id` = ta.`author id`\nJOIN titles t ON ta.`title id` = t.`title id`\nLEFT JOIN sales s ON t.`title id` = s.`title id` AND YEAR(s.`order date`) = YEAR(CURDATE())\nWHERE a.contract = 0\nGROUP BY a.`author id`, t.`title id`;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于来自CA的所有未签订合同的作者，他/她的哪一本书今年迄今为止的销量最高。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, t.year_to_date_sales\nFROM titles t\nJOIN titleauthor ta ON t.title_id = ta.title_id\nJOIN authors a ON ta.author_id = a.author_id\nWHERE a.state = 'CA' AND a.contract = 0\nAND YEAR(t.publication_date) = YEAR(CURDATE())\nORDER BY t.year_to_date_sales DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出“寿司，有人吗？”的所有作者的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT a.`author first name`, a.`author last name`\nFROM authors a\nJOIN titleauthor ta ON a.`author id` = ta.`author id`\nJOIN titles t ON ta.`title id` = t.`title id`\nWHERE t.title = '寿司，有人吗？';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算编辑或设计师员工的百分比？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(ROUND((COUNT(DISTINCT e.employee_id) / (SELECT COUNT(*) FROM employee)) * 100, 2), '%') AS editor_designer_percentage\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE j.job_description = 'Editor' OR j.job_description = 'Designer';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:按出版商名称列出今年迄今销售额高于平均订单的所有图书。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.publisher_name, SUM(t.price * s.quantity) AS total_sales\nFROM publishers p\nJOIN titles t ON p.publisher_id = t.publisher_id\nJOIN sales s ON t.title_id = s.title_id\nWHERE YEAR(s.order_date) = YEAR(CURDATE())\nGROUP BY p.publisher_name\nHAVING total_sales > (SELECT AVG(t2.price * s2.quantity) \n                      FROM sales s2\n                      JOIN titles t2 ON s2.title_id = t2.title_id\n                      WHERE YEAR(s2.order_date) = YEAR(CURDATE()));\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:美国有多少出版商？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT `publisher id`) FROM publishers WHERE country = 'USA';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:新月书局的信息是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "SELECT * FROM publishers WHERE `publisher name` = '新月书局';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出担任总编辑的员工的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`first name`, e.`last name`\nFROM employee e\nJOIN jobs j ON e.`job id` = j.`job id`\nWHERE j.`job description` = 'Editor in Chief';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于最早被雇佣的员工来说，最高级别的工作是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT j.job_description \nFROM jobs j \nJOIN employee e ON j.job_id = e.job_id \nWHERE e.hire_date = (SELECT MIN(hire_date) FROM employee) \nORDER BY j.max_level DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:总销售额最高的商店位于哪个城市？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.city FROM stores s\nJOIN sales sa ON s.store_id = sa.store_id\nJOIN titles t ON sa.title_id = t.title_id\nGROUP BY s.city\nORDER BY SUM(sa.quantity * t.price) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:卖得最好的书的价格是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT price FROM titles ORDER BY `year to date sales` DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出订购《没有恐惧的生活》一书的商店。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.store_name\nFROM stores s\nJOIN sales sa ON s.store_id = sa.store_id\nJOIN titles t ON sa.title_id = t.title_id\nWHERE t.title = '没有恐惧的生活';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在订购了《无所畏惧的生活》一书的商店中，有多少家位于马萨诸塞州？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT s.store_id) \nFROM stores s \nJOIN sales sa ON s.store_id = sa.store_id \nJOIN titles t ON sa.title_id = t.title_id \nWHERE t.title = '无所畏惧的生活' AND s.state = 'MA';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:《无所畏惧的生活》一书的出版商在哪个国家？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.country \nFROM publishers p \nJOIN titles t ON p.publisher id = t.publisher id \nWHERE t.title = '无所畏惧的生活';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:出版最贵的书的出版商是谁？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.publisher_name\nFROM publishers p\nJOIN titles t ON p.publisher_id = t.publisher_id\nORDER BY t.price DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在美国的出版商中，有多少出版了超过15美元的书？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT p.publisher_id)\nFROM publishers p\nJOIN titles t ON p.publisher_id = t.publisher_id\nWHERE p.country = 'USA' AND t.price > 15;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请详细介绍前三本卖得最好的书。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    t.title,\n    t.year_to_date_sales,\n    a.author_first_name,\n    a.author_last_name,\n    p.publisher_name\nFROM titles t\nJOIN titleauthor ta ON t.title_id = ta.title_id\nJOIN authors a ON ta.author_id = a.author_id\nJOIN publishers p ON t.publisher_id = p.publisher_id\nORDER BY t.year_to_date_sales DESC\nLIMIT 3;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:马萨诸塞州的书店订购了多少本商业书籍？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT SUM(sales.quantity) AS total_business_books\nFROM sales\nJOIN stores ON sales.store_id = stores.store_id\nJOIN titles ON sales.title_id = titles.title_id\nWHERE stores.state = 'MA' AND titles.type = 'business';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:《无所畏惧的生活》这本书的平均每份订单量是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(sales.quantity) AS average_order_quantity\nFROM sales\nJOIN titles ON sales.title_id = titles.title_id\nWHERE titles.title = '无所畏惧的生活';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:担任总编辑的员工的平均水平是多少？平均水平和最高水平之间有多少个水平？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "SELECT AVG(e.job_level) AS avg_level, (MAX(j.max_level) - AVG(e.job_level)) AS level_difference\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE j.job_description = 'Chief Editor';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪本是最便宜的商务书？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT title, MIN(price) AS min_price FROM titles WHERE type = 'business';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪种类型的书预付款最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT type, SUM(advance) AS total_advance\nFROM titles\nGROUP BY type\nORDER BY total_advance DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:这本畅销书的版税是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "为了回答这个问题，我们需要知道“这本畅销书”的title id。但是，由于问题中没有提供具体的title id，我们无法给出一个准确的SQL查询语句来计算版税。通常，版税是基于书籍销售量和书籍的royalty rate来计算的。如果我们假设我们知道这本畅销书的title id是'T123'，那么我们可以用以下SQL语句来计算它的版税：\n\n```sql\nSELECT\n    titles.title_id,\n    titles.title,\n    SUM(sales.quantity * titles.price * titles.royalty / 100) AS royalties\nFROM\n    titles\nJOIN\n    sales ON titles.title_id = sales.title_id\nWHERE\n    titles.title_id = 'T123'\nGROUP BY\n    titles.title_id, titles.title;\n```\n\n这个查询将会返回title id为'T123'的书籍的总版税，假设版税是基于书籍的销售量、销售价格和书籍的royalty rate计算的。如果需要计算所有书籍的版税，那么可以去掉WHERE子句。如果版税计算更复杂，涉及到不同销售量区间的不同版税率，则需要进一步的计算，可能需要结合roysched表来确定正确的版税率。",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:O’Rourke的工作级别是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.job_level\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE e.last_name = 'O\\'Rourke';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:给我看没有中间名的最高员工的员工id。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "SELECT `employee id` FROM employee WHERE `minit` IS NULL ORDER BY `job level` DESC LIMIT 1;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:合同上有《寿司，有人吗？》的作者吗？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT EXISTS(\n    SELECT 1 FROM authors \n    JOIN titleauthor ON authors.`author id` = titleauthor.`author id`\n    JOIN titles ON titleauthor.`title id` = titles.`title id`\n    WHERE titles.`title` = '寿司，有人吗？' AND authors.`contract` = 1\n) AS has_author_with_contract;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个出版商的工作级别最高？说出他/她的全名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nJOIN publishers p ON e.publisher_id = p.publisher_id\nORDER BY j.max_level DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:佩德罗·阿方索的职称是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT j.job_description \nFROM employee e \nJOIN jobs j ON e.job_id = j.job_id \nWHERE e.first_name = 'Pedro' AND e.last_name = 'Alfonso';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:如果Diego W Roel能够达到他/她的职位的最高水平，他/她还需要达到多少级别？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT (j.max_level - e.job_level) AS levels_to_reach_max\nFROM employee e\nJOIN jobs j ON e.job_id = j.job_id\nWHERE e.first_name = 'Diego' AND e.last_name = 'Roel';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:关于1994/9/14年发生的订单的说明是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT notes \nFROM titles \nJOIN sales ON titles.title_id = sales.title_id \nWHERE sales.order_date = '1994-09-14';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出1993年5月29日售出的订单的书籍类型。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT t.type\nFROM titles AS t\nJOIN sales AS s ON t.title_id = s.title_id\nWHERE s.order_date = '1993-05-29';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:告诉我法国出版商的信息。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT * FROM publishers WHERE country = 'France';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:《硅谷美食》这本书的出版商是谁？提供发布者的名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.publisher_name\nFROM publishers p\nJOIN titles t ON p.publisher_id = t.publisher_id\nWHERE t.title = '硅谷美食';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:维多利亚·P·阿什沃斯在哪个城市工作？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.city\nFROM employee e\nJOIN authors a ON e.last_name = a.`author last name` AND e.first_name = a.`author first name`\nWHERE a.`author first name` = 'Victoria' AND a.`author last name` = 'Ashworth' AND a.`author middle initial` = 'P.';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:雷穆拉德的那家商店销售额是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT SUM(s.quantity * t.price) AS total_sales\nFROM sales s\nJOIN titles t ON s.title_id = t.title_id\nJOIN stores st ON s.store_id = st.store_id\nWHERE st.store_name = '雷穆拉德';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:就数量而言，1993年弗里蒙特的商店比波特兰的商店多卖了多少%？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    (SUM(CASE WHEN s.city = 'Fremont' THEN sa.quantity ELSE 0 END) /\n     SUM(CASE WHEN s.city = 'Portland' THEN sa.quantity ELSE 0 END) - 1) * 100 AS percentage_difference\nFROM\n    sales sa\nJOIN stores s ON sa.store_id = s.store_id\nWHERE\n    YEAR(sa.order_date) = 1993 AND (s.city = 'Fremont' OR s.city = 'Portland');\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在所有员工中，出版商比设计师多出多少%？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ((COUNT(DISTINCT CASE WHEN j.job_description = 'Publisher' THEN e.employee_id END) / \n      COUNT(DISTINCT CASE WHEN j.job_description = 'Designer' THEN e.employee_id END)) - 1) * 100 AS percentage_difference\nFROM \n    employee e\nJOIN \n    jobs j ON e.job_id = j.job_id\nWHERE \n    j.job_description IN ('Publisher', 'Designer');\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:查找并列出1990年至1995年间雇佣的员工的全名。同时，按工作级别的降序排列。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name\nFROM employee e\nWHERE e.hire_date BETWEEN '1990-01-01' AND '1995-12-31'\nORDER BY e.job_level DESC;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪些作品的版税高于平均水平？给出这些标题的名称、类型和价格？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, t.type, t.price\nFROM titles t\nWHERE t.royalty > (SELECT AVG(royalty) FROM titles);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:1994年，哪个标题的订单量低于平均订单量？查找标题名称、类型和价格。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, t.type, t.price\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nWHERE YEAR(s.order_date) = 1994\nGROUP BY t.title, t.type, t.price\nHAVING AVG(s.quantity) < (SELECT AVG(quantity) FROM sales WHERE YEAR(order_date) = 1994);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出新月图书出版的书名、类型和价格。按价格升序排列列表。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT titles.title, titles.type, titles.price\nFROM titles\nJOIN publishers ON titles.publisher_id = publishers.publisher_id\nWHERE publishers.publisher_name = 'New Moon Books'\nORDER BY titles.price ASC;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在美国出版商出版的书籍中，哪本书的版税最高？按版税的降序列出这些书。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, (t.price * t.royalty / 100) AS royalty_amount\nFROM titles t\nJOIN publishers p ON t.publisher_id = p.publisher_id\nWHERE p.country = 'USA'\nORDER BY royalty_amount DESC;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:找出美国和非美国出版商出版的图书的平均版税之间的差异？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ABS(AVG(CASE WHEN p.country = 'USA' THEN t.royalty ELSE NULL END) - \n        AVG(CASE WHEN p.country <> 'USA' THEN t.royalty ELSE NULL END)) AS avg_royalty_difference\nFROM \n    titles t\nJOIN \n    publishers p ON t.publisher_id = p.publisher_id;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算美国和非美国出版商雇佣的营销编辑的平均水平差异？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    AVG(CASE WHEN p.country = 'USA' THEN e.job_level ELSE NULL END) AS avg_usa_level,\n    AVG(CASE WHEN p.country <> 'USA' THEN e.job_level ELSE NULL END) AS avg_non_usa_level,\n    AVG(CASE WHEN p.country = 'USA' THEN e.job_level ELSE NULL END) - \n    AVG(CASE WHEN p.country <> 'USA' THEN e.job_level ELSE NULL END) AS avg_level_difference\nFROM \n    employee e\nJOIN \n    publishers p ON e.publisher_id = p.publisher_id\nJOIN \n    jobs j ON e.job_id = j.job_id\nWHERE \n    j.job_description = 'Marketing Editor';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪一个标题是关于如何使用电子资源的有用提示，哪家出版商出版了这本书，这本书的价格是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, p.publisher_name, t.price\nFROM titles t\nJOIN publishers p ON t.publisher_id = p.publisher_id\nWHERE t.title LIKE '%how to use electronic resources%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在这些标题中，哪一个标题是关于对强烈情绪对身体影响的仔细研究，哪家国有出版商出版了这本书，今年迄今的销量是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, p.publisher_name, t.year_to_date_sales\nFROM titles t\nJOIN publishers p ON t.publisher_id = p.publisher_id\nWHERE t.notes LIKE '%strong emotional effects on the body%' AND YEAR(t.publication_date) = YEAR(CURDATE());\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出销售额超过平均水平的前五本书，并按加州商店销售额的降序排列？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'authors': {'数据项': ['author id', 'author last name', 'author first name', 'phone', 'address', 'city', 'state', 'zip', 'contract']}, 'jobs': {'数据项': ['job id', 'job description', 'min level', 'max level']}, 'publishers': {'数据项': ['publisher id', 'publisher name', 'city', 'state', 'country']}, 'employee': {'数据项': ['employee id', 'first name', 'minit', 'last name', 'job id', 'job level', 'publisher id', 'hire_date']}, 'pub_info': {'数据项': ['publication id', 'logo', \"publisher's information\"]}, 'stores': {'数据项': ['store id', 'store name', 'store address', 'city', 'state', 'zip']}, 'discounts': {'数据项': ['discount type', 'store id', 'low quantity', 'high quantity', 'discount']}, 'titles': {'数据项': ['title id', 'title', 'type', 'publisher id', 'price', 'advance', 'royalty', 'year to date sales', 'notes', 'publication date']}, 'roysched': {'数据项': ['title_id', 'low range', 'high range', 'royalty']}, 'sales': {'数据项': ['store id', 'order number', 'order date', 'quantity', 'payterms', 'title id']}, 'titleauthor': {'数据项': ['author id', 'title id', 'author ordering', 'royaltyper']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT t.title, SUM(s.quantity * t.price) AS total_sales\nFROM titles t\nJOIN sales s ON t.title_id = s.title_id\nJOIN stores st ON s.store_id = st.store_id\nWHERE st.state = 'CA'\nGROUP BY t.title\nHAVING total_sales > (SELECT AVG(sub.total_sales) FROM (SELECT SUM(s.quantity * t.price) AS total_sales\n                                                       FROM titles t\n                                                       JOIN sales s ON t.title_id = s.title_id\n                                                       GROUP BY t.title_id) sub)\nORDER BY total_sales DESC\nLIMIT 5;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪一天收到的投诉最冗长？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Date received`, MAX(LENGTH(`Consumer complaint narrative`)) AS LongestComplaintLength\nFROM events\nGROUP BY `Date received`\nORDER BY LongestComplaintLength DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:最早的投诉是从2017年3月22日开始的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT MIN(`Date received`) AS earliest_complaint_date\nFROM events\nWHERE `Date received` >= '2017-03-22';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个投诉更紧急，投诉ID CR2400594还是ID CR2405641？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Complaint ID`, priority FROM callcenterlogs WHERE `Complaint ID` IN ('CR2400594', 'CR2405641') ORDER BY priority DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出1990年以后出生的所有男性客户的全名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(first, ' ', middle, ' ', last) AS FullName\nFROM client\nWHERE sex = 'M' AND year > 1990;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:客户Diesel Galloway提出了多少投诉？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) AS NumberOfComplaints\nFROM client c\nJOIN events e ON c.`client id` = e.`Client ID`\nWHERE c.`first` = 'Diesel' AND c.`last` = 'Galloway';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Diesel Galloway于2014/7/3提交的投诉的详细内容是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`Consumer complaint narrative`\nFROM events e\nJOIN client c ON e.`Client ID` = c.`client id`\nWHERE c.`first` = 'Diesel' AND c.`last` = 'Galloway' AND e.`Date received` = '2014-07-03';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Matthew Pierce于2016/10/28提交的投诉中的标签是他自己批准的吗？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    CASE WHEN e.Tags = c.first THEN 'Yes' ELSE 'No' END AS IsSelfApproved\nFROM \n    events e\nJOIN \n    client c ON e.Client ID = c.client id\nWHERE \n    e.Date received = '2016-10-28' AND \n    e.Complaint ID = (\n        SELECT \n            Complaint ID \n        FROM \n            callcenterlogs \n        WHERE \n            `Date received` = '2016-10-28' AND \n            `rand client` = c.`client id`\n    );\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Matthew Pierce于2016/10/28提出的投诉被推迟了多久？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DATEDIFF(events.`Date sent to company`, '2016-10-28') AS DaysDelayed\nFROM events\nJOIN client ON events.`Client ID` = client.`client id`\nWHERE client.`first` = 'Matthew' AND client.`last` = 'Pierce' AND events.`Date received` = '2016-10-28';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:MICHAL于2017年3月27日收到投诉的客户的全名是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS FullName\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nJOIN callcenterlogs cl ON e.Complaint ID = cl.Complaint ID\nWHERE cl.Date received = '2017-03-27' AND cl.server = 'MICHAL';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Rachel Hicks于2017年3月27日提出的投诉持续了多久？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DATEDIFF(MAX(e.`Date received`), MIN(e.`Date received`)) AS Duration\nFROM events e\nJOIN client c ON e.`Client ID` = c.`client id`\nWHERE c.`first` = 'Rachel' AND c.`last` = 'Hicks' AND e.`Date received` >= '2017-03-27'\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在纽约市的所有客户中，有多少人就存款和取款问题提出了投诉？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT e.`Client ID`) \nFROM events e\nJOIN client c ON e.`Client ID` = c.`client id`\nJOIN district d ON c.`district id` = d.`district id`\nWHERE d.`city` = 'New York' \nAND e.`Issue` IN ('Deposits and withdrawals');\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出所有仍在投诉中的客户的全名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS FullName\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.Company_response_to_consumer = 'In progress';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在收到及时回复的客户中，有多少来自纽约？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT c.client_id) \nFROM client AS c\nJOIN events AS e ON c.client_id = e.Client_ID\nJOIN state AS s ON c.state = s.StateCode\nWHERE e.`Timely response?` = 'Yes' AND s.State = 'New York';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2016年有多少信用卡投诉是由男性客户提出的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM events \nJOIN client ON events.Client_ID = client.client_id \nWHERE YEAR(events.Date_received) = 2016 AND client.sex = 'Male';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:迪塞尔加洛韦在哪个部门？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "SELECT d.division\nFROM client c\nJOIN district d ON c.district id = d.district id\nWHERE c.first = '迪塞尔' AND c.last = '加洛韦';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出太平洋地区所有男性客户的全名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS full_name\nFROM client AS c\nJOIN state AS s ON c.state = s.StateCode\nWHERE c.sex = 'M' AND s.Region = 'Pacific';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:从2015年开始连续3年，纽约客户对信用卡的平均投诉数量是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(ComplaintCount) AS AvgComplaints\nFROM (\n    SELECT YEAR(e.`Date received`) AS Year, COUNT(e.`Complaint ID`) AS ComplaintCount\n    FROM events e\n    JOIN client c ON e.`Client ID` = c.`client id`\n    JOIN state s ON c.`state` = s.`State`\n    WHERE s.`State` = 'New York'\n      AND YEAR(e.`Date received`) BETWEEN 2015 AND 2017\n    GROUP BY YEAR(e.`Date received`)\n) AS YearlyComplaints\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:从2016年到2017年，纽约客户提出的投诉增加的百分比是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ((COUNT(CASE WHEN YEAR(e.`Date received`) = 2017 THEN 1 END) / COUNT(CASE WHEN YEAR(e.`Date received`) = 2016 THEN 1 END) - 1) * 100) AS percentage_increase\nFROM \n    events e\nJOIN \n    client c ON e.`Client ID` = c.`client id`\nJOIN \n    state s ON c.`state` = s.`StateCode`\nWHERE \n    s.`State` = 'New York'\n    AND YEAR(e.`Date received`) IN (2016, 2017);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:客户“C00007127”在2017/2/22的投诉电话的服务时间是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `server time`\nFROM callcenterlogs\nWHERE `rand client` = 'C00007127' AND `Date received` = '2017-02-22';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:的所有者在哪个州wyatt.collins@gmail.com“住在哪里？说出州的全名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.State\nFROM client c\nJOIN state s ON c.state = s.StateCode\nWHERE c.email = 'wyatt.collins@gmail.com';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Lennox Oliver Drake先生抱怨了哪种详细的产品？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.Product, e.`Sub-product`\nFROM events e\nJOIN client c ON e.`Client ID` = c.`client id`\nWHERE c.first = 'Lennox' AND c.middle = 'Oliver' AND c.last = 'Drake';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Gunner Omer Fuller先生抱怨的具体问题是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`Consumer complaint narrative`\nFROM events e\nJOIN client c ON e.`Client ID` = c.`client id`\nWHERE c.`first` = 'Gunner' AND c.`middle` = 'Omer' AND c.`last` = 'Fuller';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Lyric Emely Taylor女士是否同意2016/5/20投诉电话的结果？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`Consumer disputed?`\nFROM events e\nJOIN client c ON e.`Client ID` = c.`client id`\nWHERE c.`first` = 'Lyric' AND c.`middle` = 'Emely' AND c.`last` = 'Taylor'\nAND e.`Date received` = '2016-05-20';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Brantley Julian Stanley先生在2012/5/18的投诉电话延迟了多少天？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DATEDIFF(events.`Date sent to company`, callcenterlogs.`Date received`) AS DelayInDays\nFROM client\nJOIN callcenterlogs ON client.`client id` = callcenterlogs.`rand client`\nJOIN events ON callcenterlogs.`Complaint ID` = events.`Complaint ID`\nWHERE client.`first` = 'Brantley' AND client.`middle` = 'Julian' AND client.`last` = 'Stanley'\nAND callcenterlogs.`Date received` = '2012-05-18';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2018年9月11日的审查来自哪个地区？说出城市的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT d.city\nFROM reviews AS r\nJOIN district AS d ON r.district_id = d.`district id`\nWHERE r.Date = '2018-09-11';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2017年7月22日杰克逊维尔的审查背景是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Reviews, Stars\nFROM reviews\nJOIN district ON reviews.district_id = district.`district id`\nWHERE Date = '2017-07-22' AND city = 'Jacksonville';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪种产品在2016/10/7获得了印第安纳波利斯的评审？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Product\nFROM reviews\nJOIN district ON reviews.district_id = district.`district id`\nWHERE Date = '2016-10-07' AND city = 'Indianapolis';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2013/4/4，《鹰都》从小石城收获了多少明星？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT SUM(Stars) FROM reviews\nWHERE Product = '鹰都' AND Date = '2013-04-04' AND district_id = (\n    SELECT district_id FROM district WHERE city = '小石城'\n);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于拨打“CR0217298”投诉的客户，他/她的生日是什么\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.day, c.month, c.year\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.Complaint_ID = 'CR0217298';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:拨打投诉电话“CR0100432”的客户的电话号码是多少\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.phone\nFROM callcenterlogs AS ccl\nJOIN client AS c ON ccl.`rand client` = c.`client id`\nWHERE ccl.`Complaint ID` = 'CR0100432';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于2017/3/27的所有投诉电话，女性客户的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    SUM(sex = 'F') / COUNT(*) AS female_complaint_ratio\nFROM \n    client\nJOIN \n    callcenterlogs ON client.client_id = callcenterlogs.rand_client\nWHERE \n    callcenterlogs.`Date received` = '2017-03-27';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Mason Javen Lopez先生的投诉电话中获得客户同意的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n    SUM(CASE WHEN e.`Tags Consumer consent provided?` = 'Consent provided' THEN 1 ELSE 0 END) / COUNT(e.`Tags Consumer consent provided?`) AS consent_ratio\nFROM\n    client c\nJOIN\n    events e ON c.`client id` = e.`Client ID`\nWHERE\n    c.`first` = 'Mason' AND c.`middle` = 'Javen' AND c.`last` = 'Lopez';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2017年3月收到了多少优先紧急投诉？列出这些投诉的投诉ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Complaint ID`\nFROM callcenterlogs\nWHERE `Date received` BETWEEN '2017-03-01' AND '2017-03-31'\nAND `priority` = 'Urgent';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请按年龄降序列出老年客户的全名、出生日期和电子邮件id。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(first, ' ', middle, ' ', last) AS FullName, CONCAT(year, '-', month, '-', day) AS BirthDate, email\nFROM client\nWHERE age >= 65\nORDER BY age DESC;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪种产品获得的五星最多，有多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Product, COUNT(*) AS FiveStarReviews\nFROM reviews\nWHERE Stars = 5\nGROUP BY Product\nORDER BY FiveStarReviews DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出南部地区的所有州。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT State FROM state WHERE Region = 'South';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:挂断电话的客户的电子邮件id是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.email\nFROM client c\nJOIN callcenterlogs cl ON c.client id = cl.rand client\nWHERE cl.outcome = 'hung up'\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算中西部地区客户的平均年龄。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(c.age) AS average_age\nFROM client c\nJOIN state s ON c.state = s.StateCode\nWHERE s.Region = 'Midwest';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出通过传真提交投诉的客户的全名和电话号码。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS FullName, c.phone\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.`Submitted via` = 'Fax';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:查找并列出Eagle Capital星级低于平均水平的地区名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT state.Region\nFROM state\nJOIN district ON state.StateCode = district.state_abbrev\nJOIN reviews ON district.district_id = reviews.district_id\nWHERE reviews.Stars < (SELECT AVG(Stars) FROM reviews);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在山区分部打来的电话中，有多少来自青少年客户？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM callcenterlogs\nJOIN client ON callcenterlogs.`rand client` = client.`client id`\nJOIN state ON client.state = state.StateCode\nJOIN district ON client.`district id` = district.`district id`\nWHERE state.Region = 'Mountain' AND client.age BETWEEN 13 AND 19;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:女性客户对信用卡的投诉数量是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) AS FemaleCreditCardComplaints\nFROM events\nJOIN client ON events.Client_ID = client.client_id\nWHERE client.sex = 'Female' AND events.Product = 'Credit card';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在1980年至2000年出生的客户中，列出通过转介投诉的男性客户的姓名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.first, c.middle, c.last\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE c.sex = 'M'\nAND c.year BETWEEN 1980 AND 2000\nAND e.Submitted_via = 'Referral';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:佛罗里达州大多数投诉登记的媒介是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Submitted via`, COUNT(`Submitted via`) AS `TotalComplaints`\nFROM events\nJOIN client ON events.`Client ID` = client.`client id`\nJOIN state ON client.`state` = state.`State`\nWHERE state.`State` = 'Florida'\nGROUP BY `Submitted via`\nORDER BY `TotalComplaints` DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算每年从新贝德福德收到的投诉的平均数量，这些投诉已结案并作出解释。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT YEAR(e.`Date received`) AS `Year`, AVG(c.ComplaintCount) AS `AverageComplaints`\nFROM (\n    SELECT YEAR(`Date received`) AS `Year`, COUNT(*) AS ComplaintCount\n    FROM events ev\n    JOIN client cl ON ev.`Client ID` = cl.`client id`\n    JOIN district d ON cl.`district id` = d.`district id`\n    WHERE d.`city` = 'New Bedford'\n      AND ev.`Company response to consumer` = 'Closed with explanation'\n    GROUP BY YEAR(`Date received`), d.`city`\n) c\nGROUP BY c.`Year`\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:休斯顿消费者对投诉有异议的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n    ROUND(\n        (SUM(CASE WHEN e.`Consumer disputed?` = 'Yes' THEN 1 ELSE 0 END) / COUNT(*)) * 100,\n        2\n    ) AS DisputePercentage\nFROM\n    events e\nJOIN\n    client c ON e.`Client ID` = c.`client id`\nJOIN\n    state s ON c.state = s.State\nWHERE\n    s.StateCode = 'TX' AND s.State = 'Houston';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:查找在锡拉丘兹投诉的服务人员人数。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT server) \nFROM callcenterlogs \nJOIN client ON callcenterlogs.`rand client` = client.`client id` \nWHERE client.city = 'Syracuse';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在来自加利福尼亚州的电话中，优先级为1的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n    (COUNT(IF(priority = 1, 1, NULL)) / COUNT(*)) * 100 AS priority_1_percentage\nFROM\n    callcenterlogs\nJOIN\n    state ON callcenterlogs.phone final = state.StateCode\nWHERE\n    state.State = 'California';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算东北地区中老年客户平均年龄的差异。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(client.age) AS average_age_difference\nFROM client\nJOIN state ON client.state = state.StateCode\nWHERE state.Region = 'Northeast'\nAND client.age >= 40;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:根据他们的身份证号码列出3个最长的投诉。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "SELECT `Consumer complaint narrative`\nFROM events\nORDER BY CHAR_LENGTH(`Consumer complaint narrative`) DESC\nLIMIT 3;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少客户拥有gmail.com以外的电子邮件帐户？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT `email`) \nFROM `client` \nWHERE `email` NOT LIKE '%@gmail.com';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:通过身份证识别所有未给予同意许可的客户。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.`client id`\nFROM client c\nLEFT JOIN events e ON c.`client id` = e.`Client ID`\nWHERE e.`Tags Consumer consent provided?` = 'No' OR e.`Tags Consumer consent provided?` IS NULL;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:按ID列出公司在2014年9月25日收到的投诉，投诉时间最长。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Complaint ID`\nFROM callcenterlogs\nWHERE `Date received` = '2014-09-25'\nORDER BY `server time` DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:按收到日期列出优先级2的投诉。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Date received`\nFROM callcenterlogs\nWHERE priority = 2\nORDER BY `Date received`;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少投诉没有经过代理人处理？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM events LEFT JOIN callcenterlogs ON events.`Complaint ID` = callcenterlogs.`Complaint ID` WHERE callcenterlogs.`Complaint ID` IS NULL;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Sharon处理了多少信用卡投诉？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM callcenterlogs \nWHERE server = 'Sharon' AND type = 'Credit card';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个地区的一星级评价最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.Region\nFROM state s\nJOIN district d ON s.StateCode = d.state_abbrev\nJOIN reviews r ON d.district_id = r.district_id\nWHERE r.Stars = 1\nGROUP BY s.Region\nORDER BY COUNT(r.Stars) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:那些要求存单出现更多问题的客户是在哪几年出生的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT c.year\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.Issue LIKE '%存单%'\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:山区分部发生了多少起计费纠纷案件？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM events \nJOIN state ON events.Client ID = state.StateCode \nWHERE state.Region = 'Mountain' AND events.Issue = 'Billing dispute';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少男性客户来自马萨诸塞州？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM client \nJOIN district ON client.district_id = district.district_id \nWHERE client.sex = 'M' AND district.state_abbrev = 'MA';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有提出PS类投诉并由TOVA服务的客户的姓氏。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT cl.last\nFROM client cl\nJOIN events ev ON cl.client_id = ev.Client_ID\nJOIN callcenterlogs cc ON ev.Complaint_ID = cc.Complaint ID\nWHERE ev.Product = 'PS' AND cc.server = 'TOVA';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少35岁以下的客户给了Eagle National Mortgage 1颗星？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT c.client_id)\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nJOIN reviews r ON e.Complaint_ID = r.Reviews\nWHERE c.age < 35 AND r.Stars = 1 AND r.Product = 'Eagle National Mortgage';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少1977年出生的男性客户在投诉中被给予0优先级？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT c.client_id)\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nJOIN callcenterlogs cl ON e.Complaint_ID = cl.Complaint_ID\nWHERE c.year = 1977 AND c.sex = 'M' AND cl.priority = 0;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有同意使用“老年美国人”标签的客户的姓名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.first, c.last\nFROM client AS c\nJOIN events AS e ON c.client_id = e.Client_ID\nWHERE e.Tags LIKE '%Older American%' AND e.`Tags Consumer consent provided?` = 'Consent provided';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:投诉数量最多、优先级为0的州的名称是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.State\nFROM state s\nJOIN callcenterlogs c ON s.StateCode = c.state\nWHERE c.priority = 0\nGROUP BY s.State\nORDER BY COUNT(c.Complaint ID) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少女性提出的投诉在下午3点后得到了公司的及时回应？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT c.`Complaint ID`) \nFROM callcenterlogs c \nJOIN client cl ON c.`rand client` = cl.`client id` \nJOIN events e ON c.`Complaint ID` = e.`Complaint ID` \nWHERE cl.sex = 'Female' \nAND TIME(c.`server start`) > '15:00:00' \nAND e.`Timely response?` = 'Yes';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:DORIT在5分钟或更短的时间内处理了多少投诉，并通过电话向客户做出了解释？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*)\nFROM callcenterlogs\nWHERE `server` = 'DORIT'\n  AND `outcome` = 'explained by phone'\n  AND `server time` <= 5;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少姓阿尔瓦拉多的客户来自马里兰州？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM client \nJOIN state ON client.state = state.StateCode \nWHERE last = 'Alvarado' AND state.State = 'Maryland';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:30岁到50岁之间的人有多少评论包含“伟大”一词？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*)\nFROM reviews\nJOIN client ON reviews.district_id = client.district id\nWHERE client.age BETWEEN 30 AND 50\nAND reviews.Reviews LIKE '%伟大%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在收到公司的及时回复后，对该回复有争议的客户的完整地址是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.address_1, c.address_2, c.city, s.State, c.zipcode\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nJOIN state s ON c.state = s.StateCode\nWHERE e.`Timely response?` = 'Yes'\nAND e.`Consumer disputed?` = 'Yes';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2000年出生的女性客户有多少投诉不是通过网络发送的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT e.Complaint_ID)\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.sex = 'F'\nAND c.year = 2000\nAND e.`Submitted via` != 'Web';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出客户Brenda和姓Mayer的所有投诉叙述。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`Consumer complaint narrative`\nFROM events e\nJOIN client c ON e.`Client ID` = c.`client id`\nWHERE c.`first` = 'Brenda' AND c.`last` = 'Mayer';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2017年2月，该公司收到了多少来自gmail.com电子邮件客户的投诉？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM events \nJOIN client ON events.Client ID = client.client id \nWHERE client.email LIKE '%@gmail.com' \nAND MONTH(events.`Date received`) = 2 \nAND YEAR(events.`Date received`) = 2017;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:俄勒冈州客户在评论中给出的平均星级数是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(Stars) AS average_star_rating\nFROM reviews\nJOIN district ON reviews.district_id = district.district_id\nWHERE district.state_abbrev = 'OR';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:通过邮政邮件发送投诉的客户中，年龄在50岁及以上的客户比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n    (COUNT(IF(c.age >= 50, 1, NULL)) / COUNT(*)) * 100 AS percentage_of_clients_aged_50_and_above\nFROM\n    client c\nJOIN\n    events e ON c.client_id = e.Client_ID\nWHERE\n    e.Submitted_via = 'Postal mail';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:诺沃克客户的平均年龄是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(age) AS average_age\nFROM client\nWHERE city = 'Norwalk';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少住在堪萨斯城的客户提供了一星评价？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT c.client_id) \nFROM client c \nJOIN reviews r ON c.district_id = r.district_id \nJOIN district d ON c.district_id = d.district_id \nWHERE d.city = 'Kansas City' AND r.Stars = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个州给予五星评价的客户数量最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT cl.state, COUNT(DISTINCT cl.client_id) AS five_star_customers\nFROM client cl\nJOIN reviews rv ON cl.district_id = rv.district_id\nWHERE rv.Stars = 5\nGROUP BY cl.state\nORDER BY five_star_customers DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:诺亚·汤普森住在哪个地区？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.Region\nFROM client c\nJOIN state s ON c.state = s.StateCode\nWHERE c.first = '诺亚' AND c.last = '汤普森';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:凯兰·穆勒是如何提出申诉的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`Submitted via` AS MethodOfComplaint\nFROM events e\nJOIN client c ON e.`Client ID` = c.`client id`\nWHERE c.`first` = 'Kaelan' AND c.`last` = 'Muller';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2005年以后出生的人抱怨的产品是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT e.Product\nFROM events e\nJOIN client c ON e.Client_ID = c.`client id`\nWHERE c.year > 2005;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:肯德尔·艾伦对她的信用卡抱怨了多久？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT TIMESTAMPDIFF(DAY, MIN(e.`Date received`), MAX(e.`Date received`)) AS DaysComplaining\nFROM events e\nJOIN client c ON e.`Client ID` = c.`client id`\nWHERE c.`first` = 'Kendall' AND c.`last` = 'Allen' AND e.`Product` = 'Credit card';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:服务器时间最长的客户端面临的问题是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.Issue \nFROM events e\nJOIN callcenterlogs c ON e.Complaint ID = c.Complaint ID\nORDER BY c.`server time` DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少住在纽约市的客户通过传真提交了投诉？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT c.client_id)\nFROM client AS c\nJOIN events AS e ON c.client_id = e.Client_ID\nWHERE c.city = 'New York' AND e.Submitted_via = 'Fax';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:男性客户抱怨信用卡的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    (COUNT(DISTINCT e.Complaint_ID) / (SELECT COUNT(*) FROM client WHERE sex = 'Male')) AS male_complaint_ratio\nFROM \n    events e\nJOIN \n    client c ON e.Client_ID = c.client_id\nWHERE \n    c.sex = 'Male' AND e.Complaint_ID IS NOT NULL;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出未经公司许可而被公司标记为“美国老年人”的任何两位客户及其全名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.first, c.middle, c.last\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.Tags LIKE '%Older American%' AND e.Tags NOT LIKE '%Consent provided%'\nLIMIT 2;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:最年轻客户的出生日期是什么时候？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT MIN(day) AS youngest_birthdate\nFROM client\nWHERE (year, month, day) = (\n    SELECT year, month, day\n    FROM client\n    ORDER BY year DESC, month DESC, day DESC\n    LIMIT 1\n);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:消费者有多少次对公司的不及时回应没有争议？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*)\nFROM events\nWHERE `Timely response?` = 'No'\nAND `Consumer disputed?` = 'No';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少投诉时间超过15分钟？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM callcenterlogs WHERE TIMEDIFF(`server exit`, `server start`) > '00:15:00';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于优先级最高的投诉，最常见的问题是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Issue`, COUNT(`Issue`) AS `IssueCount`\nFROM `events`\nJOIN `callcenterlogs` ON `events`.`Complaint ID` = `callcenterlogs`.`Complaint ID`\nWHERE `priority` = (SELECT MAX(`priority`) FROM `callcenterlogs`)\nGROUP BY `Issue`\nORDER BY `IssueCount` DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出居住在太平洋地区的所有客户的全名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS FullName\nFROM client c\nJOIN state s ON c.state = s.StateCode\nWHERE s.Region = 'Pacific';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:投诉最多的人的社会号码是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.social\nFROM client c\nJOIN callcenterlogs cl ON c.client id = cl.rand client\nGROUP BY c.client id\nORDER BY COUNT(cl.Complaint ID) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪座城市的1星级评价最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT d.city, COUNT(*) as one_star_reviews\nFROM reviews r\nJOIN district d ON r.district_id = d.district_id\nWHERE r.Stars = 1\nGROUP BY d.city\nORDER BY one_star_reviews DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2012年3月14日通过邮件投诉的客户的地址是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.address_1, c.address_2, c.city, c.state, c.zipcode\nFROM client c\nJOIN events e ON c.client id = e.Client ID\nWHERE e.`Date received` = '2012-03-14'\nAND e.`Submitted via` = 'email';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在女性客户中，有多少人的投诉优先级为1？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM client c\nJOIN callcenterlogs cl ON c.`client id` = cl.`rand client`\nWHERE c.sex = 'Female' AND cl.priority = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出公司延迟回复的所有电话投诉服务器。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT ccl.server\nFROM callcenterlogs AS ccl\nJOIN events AS e ON ccl.`Complaint ID` = e.`Complaint ID`\nWHERE e.`Timely response?` = 'No' AND ccl.`type` = 'phone';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出Kaitlyn Eliza Elliott投诉的所有问题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`Issue`\nFROM `events` e\nJOIN `client` c ON e.`Client ID` = c.`client id`\nWHERE c.`first` = 'Kaitlyn' AND c.`middle` = 'Eliza' AND c.`last` = 'Elliott';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:收到电子邮件的客户所在州的名称是什么“skylar.ramirez@gmail.com“住在里面？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.State\nFROM state AS s\nJOIN client AS c ON s.StateCode = c.state\nWHERE c.email = 'skylar.ramirez@gmail.com';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个地区拥有第二多的客户？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT state.Region \nFROM state \nJOIN client ON state.StateCode = client.state \nGROUP BY state.Region \nORDER BY COUNT(DISTINCT client.`client id`) DESC \nLIMIT 1 OFFSET 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁是2013年9月11日服务器“MORIAH”上投诉的最终电话号码的所有者？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT cl.first, cl.middle, cl.last\nFROM callcenterlogs ccl\nJOIN client cl ON ccl.`phone final` = cl.phone\nWHERE ccl.`Date received` = '2013-09-11' AND ccl.server = 'MORIAH';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算每个年龄组的平均时间（以分钟为单位）\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT age, AVG(server_time) AS average_time_minutes\nFROM client\nJOIN callcenterlogs ON client.client_id = callcenterlogs.rand client\nGROUP BY age;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:老年人投诉的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    (COUNT(DISTINCT e.`Complaint ID`) / (SELECT COUNT(*) FROM `callcenterlogs`)) * 100 AS `ElderlyComplaintRatio`\nFROM \n    `events` e\nJOIN \n    `client` c ON e.`Client ID` = c.`client id`\nWHERE \n    c.`age` >= 65;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算印第安纳波利斯市男性客户的百分比。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n    ROUND((SUM(CASE WHEN c.sex = 'Male' THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS percentage_male_customers\nFROM\n    client c\nJOIN\n    district d ON c.district_id = d.`district id`\nWHERE\n    d.city = 'Indianapolis';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在使用谷歌账户和微软账户的青少年客户中，哪一类客户比另一类客户多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT (\n    SELECT COUNT(DISTINCT c.client_id)\n    FROM client c\n    WHERE c.age <= 18 AND c.email LIKE '%@gmail.com%'\n) AS Google_Accounts,\n(\n    SELECT COUNT(DISTINCT c.client_id)\n    FROM client c\n    WHERE c.age <= 18 AND c.email LIKE '%@outlook.com%'\n) AS Microsoft_Accounts;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电子邮件地址为的客户的全名是什么emily.garcia43@outlook.com？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(first, ' ', middle, ' ', last) AS full_name\nFROM client\nWHERE email = 'emily.garcia43@outlook.com';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:具有最高优先级的客户的名字是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT first, middle, last\nFROM client\nJOIN callcenterlogs ON client.client id = callcenterlogs.rand client\nWHERE priority = (SELECT MAX(priority) FROM callcenterlogs);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出投诉类型为“PS”的客户的电子邮件。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.email\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.type = 'PS';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在老年人中，说明在服务器YIFAT中处理其投诉的姓氏？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT cl.last\nFROM client cl\nJOIN callcenterlogs ccl ON cl.client id = ccl.rand client\nWHERE cl.age >= 65 AND ccl.server = 'YIFAT';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少住在纽约市的客户的投诉结果是“代理人”？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT c.client_id)\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nJOIN events e ON c.client_id = e.Client_ID\nWHERE d.city = 'New York' AND e.Company_response_to_consumer = 'Agent';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出对公司回应有异议的客户的全名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS FullName\nFROM client c\nJOIN events e ON c.client id = e.Client ID\nWHERE e.`Consumer disputed?` = 'Yes';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:1931年出生的客户的投诉id是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.Complaint_ID\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE c.year = 1931;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算Google帐户客户端在服务器ZOHARI中的投诉百分比。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ROUND(\n        (COUNT(*) / (SELECT COUNT(*) FROM callcenterlogs WHERE server = 'ZOHARI')) * 100, \n        2\n    ) AS google_account_complaint_percentage\nFROM callcenterlogs\nJOIN client ON callcenterlogs.`rand client` = client.`client id`\nWHERE client.email LIKE '%@google.com'\nAND callcenterlogs.server = 'ZOHARI';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说明服务器时间为20分钟及以上的客户端的全名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS FullName\nFROM callcenterlogs AS l\nJOIN client AS c ON l.`rand client` = c.`client id`\nWHERE l.`server time` >= 20;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:选择5个优先级为0的客户端，并记下他们的姓氏。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT last FROM client WHERE priority = 0 LIMIT 5;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:记下名字以字母“B”开头的客户的呼叫id。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT callcenterlogs.`call id`\nFROM client\nJOIN callcenterlogs ON client.`client id` = callcenterlogs.`rand client`\nWHERE client.first LIKE 'B%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Alexander Bronx Lewis投诉的产品是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.Product\nFROM events e\nJOIN client c ON e.Client ID = c.client id\nWHERE c.first = 'Alexander' AND c.middle = 'Bronx' AND c.last = 'Lewis';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说明未及时收到呼叫中心回复的男性客户的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.first, c.middle, c.last \nFROM client c \nJOIN events e ON c.client id = e.Client ID \nWHERE c.sex = 'Male' AND e.`Timely response?` = 'No';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪种产品受到老年客户的投诉最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Product, COUNT(*) AS ComplaintCount\nFROM events\nJOIN client ON events.Client ID = client.client id\nWHERE age >= 65\nGROUP BY Product\nORDER BY ComplaintCount DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:关于信用卡的投诉大多来自哪个年龄段的客户？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT age, COUNT(*) AS complaints_count\nFROM client\nJOIN events ON client.client_id = events.Client_ID\nWHERE Product = 'Credit card'\nGROUP BY age\nORDER BY complaints_count DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出服务器时间低于10分钟的投诉问题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT *\nFROM callcenterlogs\nWHERE `server time` < '00:10:00';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:写下收到通过传真发送的投诉的日期。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Date received`\nFROM events\nWHERE `Submitted via` = 'Fax';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有余额转账问题的客户的全名是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS FullName\nFROM client c\nJOIN events e ON c.`client id` = e.`Client ID`\nWHERE e.Issue LIKE '%balance transfer%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:通过邮寄方式提交投诉的客户的电子邮件地址是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT cl.email\nFROM events ev\nJOIN client cl ON ev.Client_ID = cl.client_id\nWHERE ev.`Submitted via` = 'Mail';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算响应为“已结束并得到缓解”的客户的平均年龄。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(c.age) AS average_age\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.Company_response_to_consumer = '已结束并得到缓解';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:投诉类型为“TT”的客户的平均年龄是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(c.age) AS average_age\nFROM client c\nJOIN events e ON c.client id = e.Client ID\nWHERE e.type = 'TT';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:从2014年1月1日至2014年12月30日，通过AVIDAN服务器填写投诉ID、电话ID和投诉的最终电话号码。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.`Complaint ID`, c.`rand client` AS `Phone ID`, c.`phone final`\nFROM callcenterlogs c\nWHERE c.`server` = 'AVIDAN'\nAND c.`Date received` BETWEEN '2014-01-01' AND '2014-12-30';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2017年1月1日至2017年4月1日期间，服务器DARMON下呼叫的平均服务器时间是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(`server time`) AS avg_server_time\nFROM callcenterlogs\nWHERE `server` = 'DARMON'\nAND `Date received` BETWEEN '2017-01-01' AND '2017-04-01';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:信用卡客户每年会投诉多少次超限费用？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "SELECT YEAR(`Date received`) AS `Year`, COUNT(*) AS `OverlimitFeeComplaints`\nFROM events\nWHERE `Issue` LIKE '%Overlimit Fee%'\nGROUP BY YEAR(`Date received`);",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在中大西洋的客户中，有多少是女性，年龄不超过18岁？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*)\nFROM client\nJOIN state ON client.state = state.StateCode\nWHERE state.Region = 'Mid-Atlantic'\nAND client.sex = 'F'\nAND client.age <= 18;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请给我印第安纳波利斯最年轻客户的完整出生日期、电子邮件和电话号码。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT client.year, client.month, client.day, client.email, client.phone\nFROM client\nJOIN state ON client.state = state.StateCode\nWHERE state.State = 'Indianapolis'\nORDER BY client.year DESC, client.month DESC, client.day DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:按降序列出2016年评论中五星评分排名前五的城市。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT d.city, COUNT(*) AS five_star_reviews\nFROM reviews r\nJOIN district d ON r.district_id = d.`district id`\nWHERE r.Stars = 5 AND YEAR(r.Date) = 2016\nGROUP BY d.city\nORDER BY five_star_reviews DESC\nLIMIT 5;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:当呼叫涉及仲裁问题时，服务器最长的时间是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT MAX(`server time`) \nFROM callcenterlogs \nWHERE `type` = 'arbitration';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请给我客户的社会号码和状态，客户的电话号码是100-121-8371。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.social, c.state\nFROM client AS c\nWHERE c.phone = '100-121-8371';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出太平洋地区客户的全名和电话号码。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS FullName, c.phone\nFROM client AS c\nJOIN state AS s ON c.state = s.StateCode\nWHERE s.Region = 'Pacific';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:延迟投诉时间最长的客户的社会号码是多少？计算延迟天数，并说明公司对消费者的回应。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.social, DATEDIFF(e.`Date sent to company`, e.`Date received`) AS delay_days, e.`Company response to consumer`\nFROM client c\nJOIN events e ON c.`client id` = e.`Client ID`\nORDER BY delay_days DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少30岁以上的女性客户？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM client WHERE sex = 'F' AND age > 30;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出居住在纽约市的所有客户的名字和姓氏。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.first, c.last\nFROM client c\nJOIN district d ON c.district_id = d.`district id`\nWHERE d.city = 'New York' AND d.state_abbrev = 'NY';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:男性客户最年长的年龄是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT MAX(age) FROM client WHERE sex = 'M';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请按每个部门计算客户数量。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT d.division, COUNT(DISTINCT c.client_id) AS customer_count\nFROM client c\nJOIN district d ON c.district_id = d.`district id`\nGROUP BY d.division;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:大西洋中部女性客户的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ROUND(\n        (SELECT COUNT(DISTINCT c.client_id) \n         FROM client c\n         JOIN state s ON c.state = s.StateCode\n         WHERE s.Region = 'Mid-Atlantic' AND c.sex = 'F') \n        / \n        (SELECT COUNT(DISTINCT c.client_id) \n         FROM client c\n         JOIN state s ON c.state = s.StateCode\n         WHERE s.Region = 'Mid-Atlantic') \n        * 100, 2) AS FemaleClientPercentage\nFROM dual;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:南大西洋客户的平均年龄是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(c.age) AS average_age\nFROM client c\nJOIN state s ON c.state = s.StateCode\nWHERE s.Region = 'South Atlantic';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:中西部地区哪个城市的客户数量最少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT d.city, COUNT(c.client_id) AS client_count\nFROM client c\nJOIN district d ON c.district_id = d.`district id`\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE s.Region = 'Midwest'\nGROUP BY d.city\nORDER BY client_count ASC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:东北部有多少客户使用Microsoft电子邮件？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT c.client_id) \nFROM client c\nJOIN state s ON c.state = s.StateCode\nWHERE s.Region = 'Northeast' AND c.email LIKE '%@microsoft.com';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:中西部哪个城市60岁以上的顾客最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT d.city, COUNT(*) as num_elderly_customers\nFROM client c\nJOIN district d ON c.district id = d.district id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE c.age >= 60 AND s.Region = 'Midwest'\nGROUP BY d.city\nORDER BY num_elderly_customers DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2017年优先级为2的关于滞纳金问题的投诉比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ROUND(\n        (\n            SELECT COUNT(*)\n            FROM callcenterlogs\n            JOIN events ON callcenterlogs.`Complaint ID` = events.`Complaint ID`\n            WHERE callcenterlogs.priority = 2\n            AND YEAR(callcenterlogs.`Date received`) = 2017\n            AND events.`Issue` LIKE '%Late fee%'\n        ) / \n        (\n            SELECT COUNT(*)\n            FROM callcenterlogs\n            WHERE priority = 2\n            AND YEAR(`Date received`) = 2017\n        ) * 100, 2\n    ) AS late_fee_complaint_percentage;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个州的城市最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT state.State, COUNT(DISTINCT district.city) AS CityCount \nFROM state \nJOIN district ON state.StateCode = district.state_abbrev \nGROUP BY state.State \nORDER BY CityCount DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请提供投诉id为CR0922485的客户的名字和电话号码。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.first, c.last, c.phone\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.Complaint_ID = 'CR0922485';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出收到投诉日期为2014年7月3日的客户的电子邮件。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.email\nFROM client c\nJOIN events e ON c.client_id = e.Client_ID\nWHERE e.`Date received` = '2014-07-03';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2012年，有多少关于信用卡产品的投诉来自奥马哈的客户？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) AS NumberOfComplaints\nFROM events\nJOIN client ON events.Client_ID = client.client_id\nJOIN district ON client.district_id = district.district_id\nWHERE events.Product = 'Credit card'\n  AND district.city = 'Omaha'\n  AND YEAR(events.Date_received) = 2012;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:从2012年到2015年，女性客户通过电子邮件提交了多少投诉？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM events \nJOIN client ON events.Client ID = client.client id \nWHERE client.sex = 'Female' \nAND events.`Submitted via` = 'Email' \nAND YEAR(events.`Date received`) BETWEEN 2012 AND 2015;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出所有仍在进行中的客户电话号码和投诉ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.phone, e.`Complaint ID`\nFROM client c\nJOIN events e ON c.`client id` = e.`Client ID`\nWHERE e.`Company response to consumer` IS NULL OR e.`Company response to consumer` = 'In progress';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2015年，波特兰的客户发送了多少关于账单纠纷的投诉？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM events \nJOIN client ON events.Client_ID = client.client_id \nJOIN state ON client.state = state.StateCode \nWHERE state.State = 'Portland' \nAND events.Issue = 'Billing dispute' \nAND YEAR(events.Date received) = 2015;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2014年，休斯顿消费者投诉延迟超过5天的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n    ROUND((SUM(CASE WHEN DATEDIFF(e.`Date sent to company`, e.`Date received`) > 5 THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS Delayed_Complaints_Percentage\nFROM\n    `events` e\nJOIN\n    `district` d ON e.`Client ID` = d.`district id`\nWHERE\n    YEAR(e.`Date received`) = 2014\n    AND d.`state_abbrev` = 'TX'\n    AND e.`Timely response?` = 'No';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2012年收到的投诉中，有多少是通过电子邮件提交的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM events \nWHERE `Date received` BETWEEN '2012-01-01' AND '2012-12-31' \nAND `Submitted via` = 'email';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供2014年4月16日收到并通过传真提交的投诉的客户ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`Client ID`\nFROM events e\nWHERE e.`Date received` = '2014-04-16'\nAND e.`Submitted via` = 'Fax';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出印第安纳州印第安纳波利斯鹰资本的审查日期。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.Date\nFROM reviews r\nJOIN district d ON r.district_id = d.district_id\nWHERE d.city = 'Indianapolis' AND d.state_abbrev = 'IN' AND r.Product = 'Eagle Capital';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2015年收到的投诉中，及时回应并作出解释的投诉总数是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM events \nWHERE YEAR(`Date received`) = 2015 \n  AND `Timely response?` = 'Yes' \n  AND `Company response to consumer` IS NOT NULL;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在年龄在20至40岁之间的女性客户中，列出他们收到投诉的日期。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.`Date received`\nFROM client c\nJOIN events e ON c.`client id` = e.`Client ID`\nWHERE c.`sex` = 'Female' AND c.`age` BETWEEN 20 AND 40;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出2016年3月14日在马萨诸塞州牛顿市获得1颗星评价的产品。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.Product\nFROM reviews r\nJOIN district d ON r.district_id = d.`district id`\nWHERE r.Stars = 1\nAND r.Date = '2016-03-14'\nAND d.city = 'Newton'\nAND d.state_abbrev = 'MA';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在鹰国家银行产品的评论中，五星评论中有多少来自田纳西州的纳什维尔？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM reviews \nJOIN district ON reviews.district_id = district.district_id \nWHERE Stars = 5 \nAND district.city = 'Nashville' \nAND district.state_abbrev = 'TN';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:25岁及以下男性客户和产品的投诉有哪些问题？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.client_id, c.sex, c.age, e.Product, e.Issue\nFROM client AS c\nJOIN events AS e ON c.client_id = e.Client_ID\nWHERE c.sex = 'Male' AND c.age <= 25;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在中西部地区的评论中，哪些产品获得了1颗星？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT r.Product\nFROM reviews r\nJOIN district d ON r.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.StateCode\nWHERE s.Region = 'Midwest' AND r.Stars = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出2017年3月通过TOVA服务器收到的投诉中涉及的产品。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT e.Product\nFROM events e\nJOIN callcenterlogs c ON e.`Complaint ID` = c.`Complaint ID`\nWHERE c.server = 'TOVA'\nAND e.`Date received` BETWEEN '2017-03-01' AND '2017-03-31';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2017年12月17日收到的Eagle National Mortgage产品五星评价是什么划分的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.Stars\nFROM reviews r\nJOIN events e ON r.Date = e.`Date received` AND r.Product = e.Product\nWHERE r.Date = '2017-12-17'\nAND r.Product = 'Eagle National Mortgage'\nAND r.Stars = 5;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在有关信用卡产品的投诉中，列出最老客户的电话号码。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.phone\nFROM client AS c\nJOIN events AS e ON c.client id = e.Client ID\nWHERE e.Product LIKE '%credit card%'\nORDER BY c.year ASC, c.month ASC, c.day ASC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2014年收到的投诉中，有多少是通过电话提交的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM events \nWHERE `Date received` BETWEEN '2014-01-01' AND '2014-12-31' \n  AND `Submitted via` = 'Phone';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出年龄超过所有客户平均年龄60%的客户投诉的产品及其问题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT e.Product, e.Issue\nFROM events e\nJOIN client c ON e.Client_ID = c.client_id\nWHERE c.age > (SELECT AVG(age) * 0.6 FROM client);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在五星产品的评论中，来自中东部和中北部的评论比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'state': {'数据项': ['StateCode', 'State', 'Region']}, 'callcenterlogs': {'数据项': ['Date received', 'Complaint ID', 'rand client', 'phone final', 'voice response unit line', 'call id', 'priority', 'type', 'outcome', 'server', 'server start', 'server exit', 'server time']}, 'client': {'数据项': ['client id', 'sex', 'day', 'month', 'year', 'age', 'social', 'first', 'middle', 'last', 'phone', 'email', 'address_1', 'address_2', 'city', 'state', 'zipcode', 'district id']}, 'district': {'数据项': ['district id', 'city', 'state_abbrev', 'division']}, 'events': {'数据项': ['Date received', 'Product', 'Sub-product', 'Issue', 'Sub-issue', 'Consumer complaint narrative', 'Tags', 'Tags Consumer consent provided?', 'Submitted via', 'Date sent to company', 'Company response to consumer', 'Timely response?', 'Consumer disputed?', 'Complaint ID', 'Client ID']}, 'reviews': {'数据项': ['Date', 'Stars', 'Reviews', 'Product', 'district_id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT ROUND(\n    (SELECT COUNT(*) FROM reviews AS r\n     JOIN district AS d ON r.district_id = d.district_id\n     JOIN state AS s ON d.state_abbrev = s.StateCode\n     WHERE r.Stars = 5 AND s.Region IN ('Midwest', 'Northeast')) /\n    (SELECT COUNT(*) FROM reviews WHERE Stars = 5) * 100, 2) AS percentage_of_reviews;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出电影《四个房间》的制作公司名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT pc.company_name\nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = '四个房间';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《四个房间》有多少家制片公司？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.company_id) \nFROM movie m \nJOIN movie_company mc ON m.movie_id = mc.movie_id \nWHERE m.title = '四个房间';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出制作公司“环球影业”制作的所有电影的片名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = '环球影业';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:由制片公司“环球影业”制作的最新电影的片名是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title \nFROM movie AS m \nJOIN movie_company AS mc ON m.movie_id = mc.movie_id \nJOIN production_company AS pc ON mc.company_id = pc.company_id \nWHERE pc.company_name = '环球影业' \nORDER BY m.release_date DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《加勒比海盗：世界末日》的摄影导演叫什么名字？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE m.title = '加勒比海盗：世界末日' AND d.department_name = 'Cinematography' AND mc.job = 'Director of Photography';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Dariusz Wolski在电影《加勒比海盗：世界末日》中的工作是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.job\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE p.person_name = 'Dariusz Wolski' AND m.title = '加勒比海盗：世界末日';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出电影《加勒比海盗：世界末日》所有剧组成员的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE m.title = '加勒比海盗：世界末日';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少剧组成员在电影《加勒比海盗：世界末日》中担任制片人？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.person_id) AS producer_count\nFROM movie_crew mc\nJOIN movie m ON mc.movie_id = m.movie_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE m.title = '加勒比海盗：世界末日' AND d.department_name = 'Production' AND mc.job = 'Producer';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出电影《加勒比海盗：世界末日》中所有制片人的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM person p\nJOIN movie_crew mc ON p.person_id = mc.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE m.title = '加勒比海盗：世界末日' AND d.department_name = 'Production' AND mc.job = 'Producer';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Dariusz Wolski在多少部电影中担任摄影导演？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.movie_id) AS total_movies\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Dariusz Wolski' AND mc.job = 'Director of Photography';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在Dariusz Wolski担任摄影导演的电影中，平均投票率最高的电影的标题是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Dariusz Wolski'\nAND mc.job = 'Director of Photography'\nORDER BY m.vote_average DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Dariusz Wolski担任剧组成员的最新电影上映日期是什么时候？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT MAX(m.release_date)\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Dariusz Wolski';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在Dariusz Wolski担任摄影导演的电影中，平均投票率超过5.0的电影比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    (COUNT(CASE WHEN m.`vote average` > 5.0 THEN 1 END) / COUNT(*)) * 100 AS percentage_of_movies_above_5\nFROM \n    movie m\nJOIN \n    movie_crew mc ON m.`movie id` = mc.`movie id`\nJOIN \n    person p ON mc.`person id` = p.`person id`\nWHERE \n    mc.`job` = 'Director of Photography' \n    AND p.`person name` = 'Dariusz Wolski';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Dariusz Wolski担任摄影导演的这部电影的平均收入是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(m.revenue) AS average_revenue\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Dariusz Wolski' AND mc.job = 'Director of Photography';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出这部收入为559852396的电影的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT title FROM movie WHERE revenue = 559852396;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:大卫·鲁宾在电影《雷霆战记》中的工作是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.job\nFROM movie_crew mc\nJOIN person p ON mc.person id = p.person id\nJOIN movie m ON mc.movie id = m.movie id\nWHERE p.person name = 'David Rubin' AND m.title = '雷霆战记';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:迈克尔·贝导演了多少部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.movie_id) AS number_of_movies_directed_by_michael_bay\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Michael Bay' AND mc.job = 'Director';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:显示电影“我希望他们在地狱里提供啤酒”的关键词总数。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) AS keyword_count\nFROM movie_keywords\nJOIN movie ON movie.movie_id = movie_keywords.movie_id\nWHERE movie.title = \"我希望他们在地狱里提供啤酒\";\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《死亡之地》的导演是谁？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE m.title = '死亡之地' AND d.department_name = 'Directing' AND mc.job = 'Director';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出派拉蒙动画制作的电影数量。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movie_company mc\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Paramount Animation';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《蜘蛛侠3》中有多少女性角色？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.person_id) AS female_character_count\nFROM movie m\nJOIN movie_cast mc ON m.movie_id = mc.movie_id\nJOIN gender g ON mc.gender_id = g.gender_id\nWHERE m.title = 'Spider-Man 3' AND g.gender = 'Female';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供电影中最常用的关键字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT k.`keyword name`, COUNT(*) AS keyword_count\nFROM keyword k\nJOIN movie_keywords mk ON k.`keyword id` = mk.`keyword id`\nGROUP BY k.`keyword id`\nORDER BY keyword_count DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《阿米蒂维尔恐怖》有多少制片人？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.person_id) AS producer_count\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE m.title = '阿米蒂维尔恐怖' AND d.department_name = 'Production' AND mc.job = 'Producer';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《疯狂的心》的制片公司是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT pc.company_name\nFROM production_company AS pc\nJOIN movie_company AS mc ON pc.company_id = mc.company_id\nJOIN movie AS m ON mc.movie_id = m.movie_id\nWHERE m.title = '疯狂的心';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:给出以“拯救世界”为关键词的电影数量。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movie \nJOIN movie_keywords ON movie.movie id = movie_keywords.movie id \nJOIN keyword ON movie_keywords.keyword id = keyword.keyword id \nWHERE keyword.keyword name LIKE '%拯救世界%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在所有由残酷与不寻常电影公司制作的电影中，哪一部最受欢迎？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title, m.popularity \nFROM movie AS m \nJOIN movie_company AS mc ON m.movie_id = mc.movie_id \nJOIN production_company AS pc ON mc.company_id = pc.company_id \nWHERE pc.company_name = '残酷与不寻常电影公司' \nORDER BY m.popularity DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于电影《火之王》，玛西娅·罗斯在哪个部门？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT d.department_name\nFROM department d\nJOIN movie_crew mc ON d.department_id = mc.department_id\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = '火之王' AND p.person_name = '玛西娅·罗斯';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算由Jaume Collet Serra执导的电影的平均预算。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(m.budget) AS average_budget\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Jaume Collet Serra' AND mc.job = 'Director';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《新娘大战》中男性角色的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    (COUNT(gender.gender) / (SELECT COUNT(*) FROM movie_cast \n                             JOIN movie ON movie_cast.movie_id = movie.movie_id \n                             WHERE movie.title = '新娘大战')) * 100 AS male_percentage\nFROM movie_cast\nJOIN movie ON movie_cast.movie_id = movie.movie_id\nJOIN gender ON movie_cast.gender_id = gender.gender_id\nWHERE movie.title = '新娘大战' AND gender.gender = 'Male';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:这部用最多的资金和资源制作的电影的片名是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT title FROM movie ORDER BY budget DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少部电影的票房至少达到10亿？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movie WHERE revenue >= 1000000000;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:第一部电影是什么时候上映的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `release date` FROM movie ORDER BY `release date` ASC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少船员叫约翰·杨？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM person WHERE person_name = 'John Young';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供最受大多数人喜爱的电影的标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT title FROM movie ORDER BY vote_average DESC, vote_count DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:与机组人员id 1325273相关的人员是谁？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT p.person_name \nFROM person p \nJOIN movie_crew mc ON p.person_id = mc.person_id \nJOIN movie_crew mc_related ON mc.movie_id = mc_related.movie_id \nWHERE mc_related.person_id = 1325273;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:制作电影最多的制片公司叫什么名字？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT pc.company_name\nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nGROUP BY pc.company_id\nORDER BY COUNT(mc.movie_id) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁在所有的加勒比海盗电影中扮演杰克·斯派罗船长？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM person p\nJOIN movie_cast mc ON p.person_id = mc.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE mc.character_name = 'Captain Jack Sparrow'\nAND m.title LIKE '%Pirates of the Caribbean%'\nGROUP BY p.person_name\nHAVING COUNT(DISTINCT m.movie_id) = (SELECT COUNT(DISTINCT movie_id) FROM movie WHERE title LIKE '%Pirates of the Caribbean%');\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:华特迪士尼影业最受欢迎的电影是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title, m.popularity \nFROM movie m \nJOIN movie_company mc ON m.movie_id = mc.movie_id \nJOIN production_company pc ON mc.company_id = pc.company_id \nWHERE pc.company_name = 'Walt Disney Pictures' \nORDER BY m.popularity DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:环球影城上映了多少部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT movie.movie_id) FROM movie\nJOIN movie_company ON movie.movie_id = movie_company.movie_id\nJOIN production_company ON movie_company.company_id = production_company.company_id\nWHERE production_company.company_name = '环球影城';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪家制片公司制作的电影票房最高？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT pc.company_name\nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nJOIN movie m ON mc.movie_id = m.movie_id\nGROUP BY pc.company_id\nORDER BY SUM(m.revenue) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《史密斯先生去华盛顿》中有多少女剧组成员？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movie\nJOIN movie_crew ON movie.movie_id = movie_crew.movie_id\nJOIN person ON movie_crew.person_id = person.person_id\nJOIN gender ON movie_cast.gender_id = gender.gender_id\nWHERE movie.title = 'Mr. Smith Goes to Washington' AND gender.gender = 'Female';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出制作了至少200部电影的制片公司的名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT pc.company_name\nFROM production_company AS pc\nJOIN movie_company AS mc ON pc.company_id = mc.company_id\nGROUP BY pc.company_id\nHAVING COUNT(mc.movie_id) >= 200;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哈里森·福特总共出演了多少部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.movie_id) AS total_movies\nFROM person AS p\nJOIN movie_cast AS mc ON p.person_id = mc.person_id\nWHERE p.person_name = 'Harrison Ford';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:杰米·福克斯最近的一部电影叫什么名字？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_cast mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Jamie Foxx'\nORDER BY m.release_date DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:昆汀·塔伦蒂诺在1995年上映的电影中出演了多少部？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.movie_id) \nFROM movie_cast AS mc \nJOIN person AS p ON mc.person_id = p.person_id \nJOIN movie AS m ON mc.movie_id = m.movie_id \nWHERE p.person_name = 'Quentin Tarantino' \nAND YEAR(m.release_date) = 1995;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有史以来第一部犯罪电影的片名是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT title \nFROM movie \nJOIN movie_genres ON movie.movie_id = movie_genres.movie_id \nJOIN genre ON movie_genres.genre_id = genre.genre_id \nWHERE genre_name = 'Crime' \nORDER BY release_date \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少恐怖电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movie_genres\nINNER JOIN genre ON movie_genres.`genre id` = genre.`genre id`\nWHERE genre.`genre_name` = 'Horror';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出《第十二部电影》第二位剪辑师的身份证。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_id\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE m.title = '第十二部电影' AND d.department_name = 'Editing' AND mc.job = 'Editor'\nORDER BY mc.person_id ASC\nLIMIT 1 OFFSET 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:《第129号电影》有多少动画师？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) AS NumberOfAnimators\nFROM movie_crew mc\nJOIN movie m ON mc.movie_id = m.movie_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE m.title = '第129号电影' AND d.department_name = 'Animation';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在第十九部电影中，七部有多少人？请给我他们的工作。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.person_id, p.person_name, d.department_name, mc.job\nFROM movie_cast AS mc\nJOIN person AS p ON mc.person_id = p.person_id\nJOIN movie_crew AS mcw ON mc.person_id = mcw.person_id\nJOIN department AS d ON mcw.department_id = d.department_id\nWHERE mc.movie_id = (\n    SELECT m.movie_id\n    FROM movie AS m\n    ORDER BY m.release_date\n    LIMIT 18, 1\n) AND mc.gender_id = 7;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在第285号电影中，将演员的个人ID和角色名称写在序号1和10之间。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.person_id, mc.character_name\nFROM movie_cast mc\nWHERE mc.movie_id = 285 AND mc.cast_order BETWEEN 1 AND 10;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:鲍勃·彼得森在电影片尾字幕中出现了多少次？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movie_crew mc \nJOIN person p ON mc.person_id = p.person_id \nWHERE p.person_name = 'Bob Peterson' AND mc.job = 'Credits';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:记下金·凯瑞主演的电影中的电影ID和角色名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.movie_id, mc.character_name\nFROM movie_cast mc\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Jim Carrey';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请说出第1865号电影中女性演员的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM person p\nJOIN movie_cast mc ON p.person_id = mc.person_id\nJOIN gender g ON mc.gender_id = g.gender_id\nWHERE mc.movie_id = 1865 AND g.gender = 'Female';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:给我写一下金·凯瑞主演的电影的片名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_cast mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Jim Carrey';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出1916年1月1日至1925年12月31日期间上映的电影的导演姓名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE mc.job = 'Director' AND m.release_date BETWEEN '1916-01-01' AND '1925-12-31';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在1990年1月2日至2000年12月30日期间，有多少部电影由乌玛·瑟曼主演？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.movie_id)\nFROM movie_cast mc\nJOIN person p ON mc.person_id = p.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE p.person_name = 'Uma Thurman'\nAND m.release_date BETWEEN '1990-01-02' AND '2000-12-30';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:以平均7票以上的票数写出恐怖电影的标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE g.genre_name = 'Horror' AND m.vote_average > 7;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:给出2012年至2015年间收入至少为120000000的电影的类型和受欢迎程度。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT g.genre_name, m.popularity\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE m.revenue >= 120000000 AND m.release_date BETWEEN '2012-01-01' AND '2015-12-31';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在1990年1月2日至2003年12月30日期间，有多少印度电影的收入超过75000000部，受欢迎程度不低于20部？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) \nFROM movie \nJOIN production_country ON movie.movie_id = production_country.movie_id \nJOIN country ON production_country.country_id = country.country_id \nWHERE country.country_name = 'India' \nAND movie.release_date BETWEEN '1990-01-02' AND '2003-12-30' \nAND movie.revenue > 75000000 \nAND movie.popularity >= 20;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:迄今为止预算最高的电影的片名是什么？请包括收入和国家名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title, m.revenue, c.country_name\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.mivie_id\nJOIN country c ON pc.country_id = c.country_id\nORDER BY m.budget DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出1990年1月1日至1995年12月31日期间发行的拉丁语电影的标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nWHERE l.language_name = 'Latin'\nAND m.release_date BETWEEN '1990-01-01' AND '1995-12-31';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2006年美国电影的平均收入是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(revenue) AS average_revenue\nFROM movie\nWHERE YEAR(release_date) = 2006;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算2016年印度和美国电影平均收入之间的差距。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ABS(AVG(CASE WHEN c.country_name = 'India' THEN m.revenue END) - \n        AVG(CASE WHEN c.country_name = 'United States' THEN m.revenue END)) AS revenue_gap\nFROM \n    movie m\nJOIN \n    production_country pc ON m.movie_id = pc.movie_id\nJOIN \n    country c ON pc.country_id = c.country_id\nWHERE \n    c.country_name IN ('India', 'United States') AND\n    YEAR(m.release_date) = 2016;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2015年，印度制作的电影中爱情片的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    CONCAT(ROUND((COUNT(DISTINCT CASE WHEN g.genre_name = '爱情' THEN m.movie_id END) / COUNT(DISTINCT m.movie_id)) * 100, 2), '%') AS romance_movie_percentage\nFROM \n    movie m\nJOIN \n    production_country pc ON m.movie_id = pc.mivie_id\nJOIN \n    country c ON pc.country_id = c.country_id\nJOIN \n    movie_genres mg ON m.movie_id = mg.movie_id\nJOIN \n    genre g ON mg.genre_id = g.genre_id\nWHERE \n    c.country_name = 'India' \n    AND YEAR(m.release_date) = 2015;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个演员扮演擎天柱？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM person p\nJOIN movie_cast mc ON p.person_id = mc.person_id\nWHERE mc.character_name = '擎天柱';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:“美国空军军士长Epps”这个角色的性别是什么\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT g.gender\nFROM person p\nJOIN movie_cast mc ON p.person_id = mc.person_id\nJOIN gender g ON mc.gender_id = g.gender_id\nWHERE p.person_name = 'Epps' AND mc.character_name = '美国空军军士长Epps';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有参与电影《超级海军陆战队：战锤40000电影》的公司\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT pc.company_name\nFROM production_company AS pc\nJOIN movie_company AS mc ON pc.company_id = mc.company_id\nJOIN movie AS m ON mc.movie_id = m.movie_id\nWHERE m.title = '超级海军陆战队：战锤40000电影';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Radiant Film GmbH公司拍摄了哪部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Radiant Film GmbH';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:《天空队长》和《明日世界》有哪些类型？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT g.genre_name\nFROM genre g\nJOIN movie_genres mg ON g.genre_id = mg.genre_id\nJOIN movie m ON m.movie_id = mg.movie_id\nWHERE m.title IN ('天空队长', '明日世界');\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:写下电影《天空队长与明日世界》的所有关键词\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT k.`keyword name`\nFROM `keyword` k\nJOIN `movie_keywords` mk ON k.`keyword id` = mk.`keyword id`\nJOIN `movie` m ON mk.`movie id` = m.`movie id`\nWHERE m.`title` = '天空队长与明日世界';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影“Gojira ni sen mireniamu”来自哪个国家？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT c.`country name`\nFROM `movie` m\nJOIN `production_country` pc ON m.`movie id` = pc.`mivie id`\nJOIN `country` c ON pc.`country id` = c.`country id`\nWHERE m.`title` = 'Gojira ni sen mireniamu';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪部电影的关键词是“极端”\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title \nFROM movie m \nJOIN movie_keywords mk ON m.movie_id = mk.movie_id \nJOIN keyword k ON mk.keyword_id = k.keyword_id \nWHERE k.keyword_name = '极端';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出10部在法国制作的电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.movie_id\nJOIN country c ON pc.country_id = c.country_id\nWHERE c.country_name = 'France'\nLIMIT 10;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁是电影《变形金刚》的导演\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM person p\nJOIN movie_crew mc ON p.person_id = mc.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = '变形金刚' AND mc.job = 'Director';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出10名曾在电影《疯狂的麦克斯：狂暴之路》中工作的工作人员\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM person p\nJOIN movie_crew mc ON p.person_id = mc.person_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.title = '疯狂的麦克斯：狂暴之路'\nLIMIT 10;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:来自日本的电影中有多少属于“动画”类型？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT m.movie_id) AS number_of_animated_movies\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.mivie_id\nJOIN country c ON pc.country_id = c.country_id\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE c.country_name = 'Japan' AND g.genre_name = 'Animation';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《钢铁侠》的男女演员比例是多少统计有多少人有未指明的性别。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n    SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END) AS MaleActors,\n    SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS FemaleActors,\n    SUM(CASE WHEN g.gender IS NULL OR g.gender NOT IN ('Male', 'Female') THEN 1 ELSE 0 END) AS UndefinedGender\nFROM\n    movie m\nJOIN\n    movie_cast mc ON m.movie id = mc.movie id\nLEFT JOIN\n    gender g ON mc.gender id = g.gender id\nWHERE\n    m.title = '钢铁侠';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出2000年之前上映的五部电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "SELECT title FROM movie WHERE `release date` < '2000-01-01' LIMIT 5;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:标题为“罪恶之城”的电影的关键词ID是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT keyword.`keyword id`\nFROM movie\nJOIN movie_keywords ON movie.`movie id` = movie_keywords.`movie id`\nJOIN keyword ON movie_keywords.`keyword id` = keyword.`keyword id`\nWHERE movie.title = '罪恶之城';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:查找关键字为“天使”的电影标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie AS m\nJOIN movie_keywords AS mk ON m.movie id = mk.movie id\nJOIN keyword AS k ON mk.keyword id = k.keyword id\nWHERE k.keyword name = '天使';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪些关键词属于受欢迎程度最高的电影标题？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT k.`keyword name`\nFROM keyword k\nJOIN movie_keywords mk ON k.`keyword id` = mk.`keyword id`\nJOIN movie m ON mk.`movie id` = m.`movie id`\nORDER BY m.`popularity` DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供标题为“黑暗骑士”的电影类型ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mg.`genre id`\nFROM `movie` m\nJOIN `movie_genres` mg ON m.`movie id` = mg.`movie id`\nWHERE m.`title` = '黑暗骑士';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出惊悚类型的电影名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie AS m\nJOIN movie_genres AS mg ON m.movie_id = mg.movie_id\nJOIN genre AS g ON mg.genre_id = g.genre_id\nWHERE g.genre_name = 'Thriller';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:写下五部传闻中的戏剧类电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title \nFROM movie m \nJOIN movie_genres mg ON m.`movie id` = mg.`movie id` \nJOIN genre g ON mg.`genre id` = g.`genre id` \nJOIN movie_keywords mk ON m.`movie id` = mk.`movie id`\nJOIN keyword k ON mk.`keyword id` = k.`keyword id` \nWHERE g.genre_name = 'Drama' AND k.`keyword name` LIKE 'rumor%'\nLIMIT 5;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:收入最低的电影标题是什么类型的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT genre.genre_name\nFROM movie\nJOIN movie_genres ON movie.movie_id = movie_genres.movie_id\nJOIN genre ON movie_genres.genre_id = genre.genre_id\nWHERE movie.revenue = (SELECT MIN(revenue) FROM movie);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说明电影标题的类型，运行时间仅为14分钟。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title, g.genre_name\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE m.runtime = 14;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:这部电影的片名是什么类型的，深受观众欢迎，但收入最低？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT title, genre_name \nFROM movie \nJOIN movie_genres ON movie.movie id = movie_genres.movie id \nJOIN genre ON movie_genres.genre id = genre.genre id \nWHERE popularity > (SELECT AVG(popularity) FROM movie) \nORDER BY revenue ASC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:为电影标题的类型提供一条标语：“很久以前，在一个遥远的星系里……”。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "UPDATE movie SET tagline = \"很久以前，在一个遥远的星系里……\" WHERE title = '类型';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:这部名为《加勒比海盗：死人的胸膛》的电影的国家ID是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT pc.`country id`\nFROM `movie` m\nJOIN `production_country` pc ON m.`movie id` = pc.`mivie id`\nWHERE m.`title` = '加勒比海盗：死人的胸膛';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出在加拿大制作的电影名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT movie.title\nFROM movie\nJOIN production_country ON movie.movie id = production_country.movie id\nJOIN country ON production_country.country id = country.country id\nWHERE country.country name = 'Canada';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:累积以“电子游戏”为关键词的电影标题的预算。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT SUM(m.budget) FROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nJOIN keyword k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name LIKE '%电子游戏%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于以“内战”为关键词的电影，计算这些电影产生的平均收入。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(m.revenue) AS average_revenue\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nJOIN keyword k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name LIKE '%内战%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:找出得票率最高的电影的受欢迎程度。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT popularity FROM movie ORDER BY (vote_count / (vote_count + 1)) * vote_average DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在零预算电影中，哪一部的收入最高？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:制作电影《角斗士》的制片公司的ID是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.company_id\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nWHERE m.title = '角斗士';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出1916年发行电影的制片公司的ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT mc.company_id\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nWHERE m.release_date LIKE '1916-%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出卢卡斯影业出品的电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = '卢卡斯影业';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在华纳兄弟影业的电影中，哪部电影的收入最高？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title, MAX(m.revenue) AS highest_revenue\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = '华纳兄弟影业'\nGROUP BY m.title\nORDER BY highest_revenue DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:写下二十世纪福克斯电影公司制作的电影的上映日期。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `movie`.`release date`\nFROM `movie`\nJOIN `movie_company` ON `movie`.`movie id` = `movie_company`.`movie id`\nJOIN `production_company` ON `movie_company`.`company id` = `production_company`.`company id`\nWHERE `production_company`.`company name` = 'Twentieth Century Fox Film Corporation'\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《走线》的语言ID是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT ml.language_id\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nWHERE m.title = '走线';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:找出受欢迎程度最高的电影的语言ID。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT language_id \nFROM movie_languages \nWHERE movie_id = (\n    SELECT movie_id \n    FROM movie \n    ORDER BY popularity DESC \n    LIMIT 1\n)\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:讲述电影《从前的西方》的语言。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.language_name\nFROM language AS l\nJOIN movie_languages AS ml ON l.language_id = ml.language_id\nJOIN movie AS m ON ml.movie_id = m.movie_id\nWHERE m.title = '从前的西方';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:荷兰有后期制作的电影吗？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT m.movie_id, m.title\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.movie_id\nJOIN country c ON pc.country_id = c.country_id\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE c.country_name = 'Netherlands' AND d.department_name = 'Editing';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出波尔斯基电影的口号。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "SELECT movie.tagline FROM movie\nJOIN movie_crew ON movie.movie id = movie_crew.movie id\nJOIN person ON movie_crew.person id = person.person id\nWHERE person.person name = '波尔斯基' AND movie_crew.job = 'Director';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供印尼巴哈萨电影的主页。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.movie_id, m.title, m.homepage\nFROM movie m\nJOIN production_country pc ON m.movie_id = pc.movie_id\nJOIN country c ON pc.country_id = c.country_id\nWHERE c.country_name = 'Indonesia'\nAND EXISTS (\n    SELECT 1\n    FROM movie_languages ml\n    JOIN language l ON ml.language_id = l.language_id\n    WHERE ml.movie_id = m.movie_id\n    AND l.language_name = 'Bahasa Indonesia'\n);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:算出英语和拉丁语电影的收入差异。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    ABS(SUM(CASE WHEN l.language_name = 'English' THEN m.revenue ELSE 0 END) - \n        SUM(CASE WHEN l.language_name = 'Latin' THEN m.revenue ELSE 0 END)) AS revenue_difference\nFROM\n    movie m\nJOIN \n    movie_languages ml ON m.movie_id = ml.movie_id\nJOIN \n    language l ON ml.language_id = l.language_id\nWHERE \n    l.language_name IN ('English', 'Latin');\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:计算Fantasy Films和Live Entertainment的收入。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT SUM(m.revenue) AS total_revenue\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name IN ('Fantasy Films', 'Live Entertainment');\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:拉丁电影的平均收入是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(revenue) AS average_revenue\nFROM movie\nJOIN production_country ON movie.movie id = production_country.mivie id\nJOIN country ON production_country.country id = country.country id\nWHERE country.country name LIKE '%Latin%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:最常见的名字是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `person name` \nFROM person \nGROUP BY `person name` \nORDER BY COUNT(*) DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:一部电影的平均剧组人数是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(crew_count) as average_crew_size FROM (\n    SELECT `movie id`, COUNT(`person id`) as crew_count\n    FROM movie_crew\n    GROUP BY `movie id`\n) as crew_size_per_movie\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有带有“圣诞节”的关键词。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `keyword name` FROM keyword WHERE `keyword name` LIKE '%圣诞节%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:所有电影中运行时间最长的是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT title FROM movie ORDER BY runtime DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:“吉尔吉斯共和国”的iso代码是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `country iso code` FROM country WHERE `country name` = '吉尔吉斯共和国';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供电影《奶嘴》的概述。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT overview FROM movie WHERE title = '奶嘴';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:“艾迪·墨菲制片公司”制作了多少部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.movie_id) AS number_of_movies\nFROM movie_company AS mc\nJOIN production_company AS pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = '艾迪·墨菲制片公司';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有扮演过名字中有“队长”的角色的演员。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT DISTINCT p.person_name\nFROM person p\nJOIN movie_cast mc ON p.person_id = mc.person_id\nWHERE mc.character_name LIKE '%队长%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在2006年上映的所有电影中，最常见的关键词是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT k.keyword_name\nFROM keyword k\nJOIN movie_keywords mk ON k.keyword_id = mk.keyword_id\nJOIN movie m ON mk.movie_id = m.movie_id\nWHERE m.release_date BETWEEN '2006-01-01' AND '2006-12-31'\nGROUP BY k.keyword_id\nORDER BY COUNT(*) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少电影的语言代码是“vi”？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT movie.movie_id) \nFROM movie \nJOIN movie_languages ON movie.movie_id = movie_languages.movie_id \nJOIN language ON movie_languages.language_id = language.language_id \nWHERE language.language_code = 'vi';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:第三种最不常见的流派是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT g.genre_name\nFROM genre g\nJOIN movie_genres mg ON g.genre_id = mg.genre_id\nGROUP BY g.genre_id\nORDER BY COUNT(mg.movie_id) ASC\nLIMIT 1 OFFSET 2\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:这部电影的口号是“一个你无法拒绝的报价”，它的原始语言是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.language_name\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nJOIN language_role lr ON ml.language_role_id = lr.role_id\nWHERE m.tagline = '一个你无法拒绝的报价' AND lr.language_role = 'original';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供所有法国电影的平均收入。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(revenue) AS average_revenue\nFROM movie\nJOIN production_country ON movie.movie_id = production_country.movie_id\nJOIN country ON production_country.country_id = country.country_id\nWHERE country.country_name = 'France';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出所有未指定的性别字符。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT gender FROM gender WHERE gender NOT IN ('Male', 'Female');\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:前五名最受欢迎的电影导演是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name, COUNT(*) as movie_count\nFROM person p\nJOIN movie_crew mc ON p.person_id = mc.person_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE d.department_name = 'Directing'\nGROUP BY p.person_id\nORDER BY movie_count DESC\nLIMIT 5;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出每种类型中预算最高的电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT g.genre_name, m.title, m.budget\nFROM movie AS m\nJOIN movie_genres AS mg ON m.movie_id = mg.movie_id\nJOIN genre AS g ON mg.genre_id = g.genre_id\nWHERE m.budget = (\n    SELECT MAX(m2.budget)\n    FROM movie AS m2\n    JOIN movie_genres AS mg2 ON m2.movie_id = mg2.movie_id\n    WHERE mg2.genre_id = g.genre_id\n)\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:关键词最多的电影的标题是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title \nFROM movie m \nJOIN movie_keywords mk ON m.movie_id = mk.movie_id \nGROUP BY m.movie_id \nORDER BY COUNT(mk.keyword_id) DESC \nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个部门的人最多？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT d.department_name\nFROM department d\nJOIN movie_crew mc ON d.department_id = mc.department_id\nGROUP BY d.department_id\nORDER BY COUNT(mc.person_id) DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:美国电影的比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT \n    (COUNT(DISTINCT pc.movie_id) / (SELECT COUNT(*) FROM movie)) * 100 AS percentage_of_us_movies\nFROM \n    production_country pc\nJOIN \n    country c ON pc.country_id = c.country_id\nWHERE \n    c.country_iso_code = 'US';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:一部电影中男女演员的平均比例是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(male_cast_count / female_cast_count) AS average_male_to_female_ratio\nFROM (\n    SELECT \n        SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END) AS male_cast_count,\n        SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS female_cast_count\n    FROM movie_cast mc\n    JOIN gender g ON mc.gender_id = g.gender_id\n    GROUP BY mc.movie_id\n    HAVING male_cast_count > 0 AND female_cast_count > 0\n) AS subquery;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出1945年上映的电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "SELECT title FROM movie WHERE YEAR(`release date`) = 1945;",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供比利时的ID和ISO代码。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `country id`, `country iso code` FROM country WHERE `country name` = 'Belgium';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出凯瑟琳·德纳芙扮演的角色名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.`character name`\nFROM movie_cast mc\nJOIN person p ON mc.`person id` = p.`person id`\nWHERE p.`person name` = 'Catherine Deneuve';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出索马里语电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie AS m\nJOIN movie_languages AS ml ON m.movie_id = ml.movie_id\nJOIN language AS l ON ml.language_id = l.language_id\nWHERE l.language_name = 'Somali';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供最受欢迎的电影的上映日期和语言。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.`release date`, l.`language name`\nFROM movie m\nJOIN movie_languages ml ON m.`movie id` = ml.`movie id`\nJOIN language l ON ml.`language id` = l.`language id`\nWHERE ml.`language role id` = (SELECT `role id` FROM language_role WHERE `language role` = 'Original')\nORDER BY m.`popularity` DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:《四个房间》电影的原始语言是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT l.language_name\nFROM movie m\nJOIN movie_languages ml ON m.movie_id = ml.movie_id\nJOIN language l ON ml.language_id = l.language_id\nJOIN language_role lr ON ml.language_role_id = lr.role_id\nWHERE m.title = '四个房间' AND lr.language_role = 'original';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出“开放水域”电影中的角色名称。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.`character name`\nFROM movie_cast mc\nJOIN movie m ON mc.`movie id` = m.`movie id`\nWHERE m.title = '开放水域';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:谁是《加勒比海盗：世界末日》电影的主要演员？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM movie m\nJOIN movie_cast mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nWHERE m.title = '加勒比海盗：世界末日'\nORDER BY mc.cast_order;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出摄制组中摄像主管的姓名。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name\nFROM person p\nJOIN movie_crew mc ON p.person_id = mc.person_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE d.department_name = 'Cinematography' AND mc.job = 'Director of Photography';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出Sally Menke在剧组的职务。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.job\nFROM movie_crew mc\nJOIN person p ON mc.person_id = p.person_id\nWHERE p.person_name = 'Sally Menke';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供在《加勒比海盗：世界末日》电影中担任音乐编辑的人的姓名和部门。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name, d.department_name\nFROM movie m\nJOIN movie_crew mc ON m.movie_id = mc.movie_id\nJOIN person p ON mc.person_id = p.person_id\nJOIN department d ON mc.department_id = d.department_id\nWHERE m.title = '加勒比海盗：世界末日' AND mc.job = '音乐编辑';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供梦工厂公司制作的电影的标题和收入。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title, m.revenue\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = '梦工厂';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:加拿大制作了多少部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movie\nJOIN production_country ON movie.movie id = production_country.movie id\nJOIN country ON production_country.country id = country.country id\nWHERE country.country name = 'Canada';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出阿甘电影的类型。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT genre.genre_name\nFROM movie\nJOIN movie_genres ON movie.movie_id = movie_genres.movie_id\nJOIN genre ON movie_genres.genre_id = genre.genre_id\nWHERE movie.title = '阿甘电影';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:提供2016年每部电影平均播放时间超过35%的电影制作公司。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT pc.company_name\nFROM production_company pc\nJOIN movie_company mc ON pc.company_id = mc.company_id\nJOIN movie m ON mc.movie_id = m.movie_id\nWHERE m.release_date BETWEEN '2016-01-01' AND '2016-12-31'\nAND (m.runtime / (m.revenue / m.budget)) > 0.35\nGROUP BY pc.company_name;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在“女导演”和“独立电影”两个关键词下，找出电影的百分比差异。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT\n  ((COUNT(DISTINCT CASE WHEN mk.keyword_id = kwd_female_director.keyword_id THEN m.movie_id END) / COUNT(DISTINCT m.movie_id)) -\n  (COUNT(DISTINCT CASE WHEN mk.keyword_id = kwd_independent_films.keyword_id THEN m.movie_id END) / COUNT(DISTINCT m.movie_id))) * 100 AS percentage_difference\nFROM\n  movie m\n  LEFT JOIN movie_keywords mk ON m.movie_id = mk.movie_id\n  LEFT JOIN keyword kwd_female_director ON mk.keyword_id = kwd_female_director.keyword_id AND kwd_female_director.keyword_name = '女导演'\n  LEFT JOIN keyword kwd_independent_films ON mk.keyword_id = kwd_independent_films.keyword_id AND kwd_independent_films.keyword_name = '独立电影';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《黑暗中的舞者》属于哪种类型？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT genre.genre_name\nFROM movie\nJOIN movie_genres ON movie.movie_id = movie_genres.movie_id\nJOIN genre ON movie_genres.genre_id = genre.genre_id\nWHERE movie.title = '黑暗中的舞者';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:2000年上映的冒险电影有多少部？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movie\nJOIN movie_genres ON movie.movie_id = movie_genres.movie_id\nJOIN genre ON movie_genres.genre_id = genre.genre_id\nWHERE genre.genre_name = 'Adventure' AND YEAR(movie.release_date) = 2000;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:派拉蒙影业在2000年制作了哪些电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Paramount Pictures' AND YEAR(m.release_date) = 2000;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:用户可以使用什么关键字来搜索电影《海底总动员》？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT k.`keyword name`\nFROM `movie` m\nJOIN `movie_keywords` mk ON m.`movie id` = mk.`movie id`\nJOIN `keyword` k ON mk.`keyword id` = k.`keyword id`\nWHERE m.`title` = '海底总动员';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:说出正面评分超过7分的恐怖电影。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title\nFROM movie m\nJOIN movie_genres mg ON m.movie_id = mg.movie_id\nJOIN genre g ON mg.genre_id = g.genre_id\nWHERE g.genre_name = 'Horror' AND m.vote_average > 7;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少制作公司制作了150多部电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT mc.company_id) \nFROM production_company AS pc \nJOIN movie_company AS mc ON pc.company_id = mc.company_id \nGROUP BY mc.company_id \nHAVING COUNT(mc.movie_id) > 150;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:马克·哈米尔的角色是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.`character name`\nFROM movie_cast mc\nJOIN person p ON mc.`person id` = p.`person id`\nWHERE p.`person name` = 'Mark Hamill';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:电影《加勒比海盗：世界末日》中有多少主要演员？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM movie_cast\nJOIN movie ON movie_cast.movie_id = movie.movie_id\nWHERE movie.title = '加勒比海盗：世界末日' AND movie_cast.cast_order < 10;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:演员哈里森·福特参与了哪些电影？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title \nFROM movie m \nJOIN movie_cast mc ON m.movie_id = mc.movie_id \nJOIN person p ON mc.person_id = p.person_id \nWHERE p.person_name = 'Harrison Ford';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:奥兰多·布鲁姆在电影《加勒比海盗：黑珍珠的诅咒》中扮演了哪个角色？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT mc.`character name`\nFROM movie_cast mc\nJOIN person p ON mc.`person id` = p.`person id`\nJOIN movie m ON mc.`movie id` = m.`movie id`\nWHERE p.`person name` = 'Orlando Bloom' AND m.`title` = 'Pirates of the Caribbean: The Curse of the Black Pearl';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在所有类型的电影中，恐怖电影的平均数量是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT AVG(horror_count) AS average_horror_movies\nFROM (\n    SELECT COUNT(*) as horror_count\n    FROM movie_genres\n    INNER JOIN genre ON movie_genres.`genre id` = genre.`genre id`\n    WHERE genre.`genre_name` = 'Horror'\n) AS horror_movie_counts;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:列出电影《加勒比海盗：世界末日》中所有制片人的名字。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT p.person_name \nFROM person p \nJOIN movie_crew mc ON p.person_id = mc.person_id \nJOIN movie m ON mc.movie_id = m.movie_id \nJOIN department d ON mc.department_id = d.department_id \nWHERE m.title = '加勒比海盗：世界末日' AND d.department_name = 'Production' AND mc.job = 'Producer';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:使用关键词“巴黎”计算电影的平均收入。列出电影的标题。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'country': {'数据项': ['country id', 'country iso code', 'country name']}, 'department': {'数据项': ['department id', 'department name']}, 'gender': {'数据项': ['gender id', 'gender']}, 'genre': {'数据项': ['genre id', 'genre_name']}, 'keyword': {'数据项': ['keyword id', 'keyword name']}, 'language': {'数据项': ['language id', 'language code', 'language name']}, 'language_role': {'数据项': ['role id', 'language role']}, 'movie': {'数据项': ['movie id', 'title', 'budget', 'homepage', 'overview', 'popularity', 'release date', 'revenue', 'runtime', 'movie_status', 'tagline', 'vote average', 'vote count']}, 'movie_genres': {'数据项': ['movie id', 'genre id']}, 'movie_languages': {'数据项': ['movie id', 'language id', 'language role id']}, 'person': {'数据项': ['person id', 'person name']}, 'movie_crew': {'数据项': ['movie id', 'person id', 'department id', 'job']}, 'production_company': {'数据项': ['company id', 'company name']}, 'production_country': {'数据项': ['mivie id', 'country id']}, 'movie_cast': {'数据项': ['movie id', 'person id', 'character name', 'gender id', 'cast order']}, 'movie_keywords': {'数据项': ['movie id', 'keyword id']}, 'movie_company': {'数据项': ['movie id', 'company id']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.title, AVG(m.revenue) AS average_revenue\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nJOIN keyword k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name = '巴黎'\nGROUP BY m.title;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少英语代码的方法注释是XML格式的？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*)\nFROM Method\nWHERE Language = 'English' AND CommentIsXml = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:标记化名称为“在线中值滤波测试中值窗口填充”的方法的任务是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.Summary\nFROM Method AS m\nWHERE m.Name Tokenized = '在线中值滤波测试中值窗口填充';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:采样时间最高的溶液的采样时间是多少？指示解决方案的id号。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Sampled At`, `Solution Id` FROM Method ORDER BY `Sampled At` DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:Github上最受关注的存储库有多少追随者？提供存储库的github地址。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Url, MAX(Watchers) AS Followers\nFROM Repo\nORDER BY Watchers DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:解决方案路径数最多的存储库的id是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Repository_Id, COUNT(*) AS SolutionCount\nFROM Solution\nGROUP BY Repository_Id\nORDER BY SolutionCount DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:最受欢迎的存储库是什么？指明其github地址和已收到的星数。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Url, Stars FROM Repo ORDER BY Stars DESC LIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:处理时间最长的解决方案路径的名称是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.Path\nFROM Solution AS s\nORDER BY s.`Processed Time` DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:下载最流行的存储库的处理时间是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.`Processed Time`\nFROM Repo r\nORDER BY r.`Stars` DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:“nofeer_Mara\\Mara.sln”解决方案路径的github地址是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.Url\nFROM Solution s\nJOIN Repo r ON s.RepositoryId = r.Id\nWHERE s.Path = 'nofeer_Mara\\Mara.sln';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个存储库的下载处理时间最长？指示是否可以在不需要编译的情况下实现存储库中的解决方案路径。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.Id, r.Url, MAX(r.ProcessedTime) AS LongestProcessedTime, s.WasCompiled\nFROM Repo r\nJOIN Solution s ON r.Id = s.RepositoryId\nGROUP BY r.Id, r.Url, s.WasCompiled\nORDER BY LongestProcessedTime DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:路径为“maravillas_link-to-delicious\\美味.sln”的解决方案的标记化名称是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Name Tokenized`\nFROM Solution\nJOIN Method ON Solution.Id = Method.Solution Id\nWHERE Solution.Path = 'maravillas_link-to-delicious\\美味.sln'\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在收到的星数在6000到9000之间的存储库中，哪个存储库的解决方案路径数最多，如果用户想要实现，则需要编译其中许多解决方案路径？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.Repository_Id, COUNT(s.Id) AS SolutionPathCount\nFROM Solution AS s\nJOIN Repo AS r ON s.Repository_Id = r.Id\nWHERE r.Stars BETWEEN 6000 AND 9000 AND s.Was_Compiled = 1\nGROUP BY s.Repository_Id\nORDER BY SolutionPathCount DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在“https://github.com/wallerdev/htmlsharp.git”，给出API调用的所有线性化序列。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.`Api Calls`\nFROM Method AS m\nJOIN Solution AS s ON m.`Solution Id` = s.Id\nJOIN Repo AS r ON s.`Repository Id` = r.Id\nWHERE r.Url = 'https://github.com/wallerdev/htmlsharp.git';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:第二大最受欢迎的存储库中有多少条解决方案路径？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM Solution\nWHERE RepositoryId = (\n    SELECT Id FROM Repo ORDER BY Stars DESC LIMIT 1 OFFSET 1\n);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:“内的解决方案路径的平均处理时间是多少https://github.com/zphingphong/discardcustomerapp.git”“？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "SELECT AVG(Solution.`Processed Time`) AS AverageProcessingTime\nFROM Solution\nJOIN Repo ON Solution.`Repository Id` = Repo.Id\nWHERE Repo.Url = 'https://github.com/zphingphong/discardcustomerapp.git';",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:对于解决方案路径为“bmatzelle_nini\\Source\\nini.sln”、标记名称为“alias text add alias”的方法，完整注释是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.`Full Comment`\nFROM `Method` AS m\nJOIN `Solution` AS s ON m.`Solution Id` = s.`Id`\nWHERE s.`Path` = 'bmatzelle_nini\\\\Source\\\\nini.sln'\nAND m.`Name` = 'alias text add alias';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:解决方案路径为“mauricodeamorim_tdd.encontro2\\tdd.encontro2.sln”的方法的API调用的线性化序列是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.`Name`, mp.`Type`, mp.`Name`\nFROM `Method` m\nJOIN `Solution` s ON m.`Solution Id` = s.`Id`\nJOIN `MethodParameter` mp ON m.`Id` = mp.`Method Id`\nWHERE s.`Path` = 'mauricodeamorim_tdd.encontro2\\tdd.encontro2.sln'\nORDER BY m.`Sampled At`, m.`Id`, mp.`Id`;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:如果用户想在中实现，需要编译多少个解决方案路径“https://github.com/jeffdik/tachy.git”“？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(*) FROM Solution\nJOIN Repo ON Solution.Repository_Id = Repo.Id\nWHERE Repo.Url = 'https://github.com/jeffdik/tachy.git' AND Solution.Was_Compiled = 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:标记化名称为“about box1 dispose”的方法的处理时间是多少？指示方法的语言。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.`Processed Time`, m.Language\nFROM Method m\nJOIN Solution s ON m.`Solution Id` = s.Id\nWHERE m.`Name Tokenized` = 'about box1 dispose';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在“maxild_playground\\playground.sln”中，方法“GitHubRepo.Cli.GitHubClientWrapper.GetReleases”的采样时间是多少？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.`Sampled At`\nFROM Method AS m\nJOIN Solution AS s ON m.`Solution Id` = s.Id\nWHERE s.Path = 'maxild_playground\\playground.sln'\nAND m.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:解决方案路径“opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln”中使用的方法的语言是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT m.Language\nFROM Method AS m\nJOIN Solution AS s ON m.Solution Id = s.Id\nWHERE s.Path = \"opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln\";\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:标记化名称为“html解析器提要”的方法的任务是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `Summary` FROM `Method` WHERE `Name Tokenized` = 'html解析器提要';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:方法“HtmlSharp.HtmlParser.Feed”的注释是XML格式的吗？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT `CommentIs Xml`\nFROM Method\nWHERE `Name` = 'HtmlSharp.HtmlParser.Feed';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪种方法具有摘要“将命令写入日志”？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Name FROM Method WHERE Summary LIKE '%将命令写入日志%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:有多少解决方案包含大多数人喜欢的存储库中的文件？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT Solution.Id)\nFROM Solution\nJOIN Repo ON Solution.RepositoryId = Repo.Id\nWHERE Repo.Stars > (\n    SELECT AVG(Stars) \n    FROM Repo\n);\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出包含大多数人喜欢的存储库中的文件的解决方案的路径。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.Path\nFROM Solution AS s\nJOIN Repo AS r ON s.RepositoryId = r.Id\nORDER BY r.Stars DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:包含解决方案ID12使用的文件的存储库的github地址是什么？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Repo.Url\nFROM Solution\nJOIN Repo ON Solution.Repository Id = Repo.Id\nWHERE Solution.Id = 12;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在存储库中包含文件并由1000多人跟踪的解决方案中，有多少可以\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT Solution.Id)\nFROM Solution\nJOIN Repo ON Solution.Repository Id = Repo.Id\nWHERE Repo.Watchers > 1000 AND Solution.Path LIKE '%/%';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:哪个解决方案包含更流行的存储库中的文件，解决方案ID18还是解决方案ID19？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT Solution.Id AS SolutionID, SUM(Repo.Stars) AS TotalStars\nFROM Solution\nJOIN Repo ON Solution.RepositoryId = Repo.Id\nJOIN Method ON Solution.Id = Method.SolutionId\nWHERE Solution.Id IN (18, 19)\nGROUP BY Solution.Id\nORDER BY TotalStars DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在存储库中包含需要最长处理时间才能下载的文件的解决方案中，有多少不需要\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT s.Id) \nFROM Solution AS s\nJOIN Repo AS r ON s.Repository Id = r.Id\nORDER BY r.Processed Time DESC\nLIMIT 1;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:下载其文件包含在路径为“jeffdik_tech\\src\\tachy.sln”的解决方案中的存储库的处理时间是多少。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT SUM(r.`Processed Time`) \nFROM `Repo` r\nJOIN `Solution` s ON r.`Id` = s.`Repository Id`\nWHERE s.`Path` = 'jeffdik_tech\\\\src\\\\tachy.sln';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请提供其文件包含在解决方案ID 9中的存储库的url？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT r.Url\nFROM Repo r\nJOIN Solution s ON r.Id = s.Repository Id\nWHERE s.Id = 9;\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:请列出包含存储库中url为“”的文件的解决方案的所有路径https://github.com/maxild/playground.git”。\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT s.Path\nFROM Solution s\nJOIN Repo r ON s.RepositoryId = r.Id\nWHERE r.Url = 'https://github.com/maxild/playground.git';\n```",
        "history": []
    },
    {
        "instruction": "你是一个精通MySQl语法的SQL工程师，可以根据数据库的表结构和实际问题写出准确的、可以直接运行的MySQL查询语句。回答结果为一个符合语法的SQL语句。在理解下面给出的数据库结构中各个数据表和数据项的含义后，生成解决问题的SQL语句（SQL语句尽可能简洁）:在拥有200多个赞的存储库中，有多少存储库中的文件由处理时间低于636439500080712000的解决方案所包含？\n    \n    回答的格式为：\n    xxxxx（SQL语句）\n    \n    该查询将在具有以下结构的数据库上运行:\n    数据表:数据表:{'Method': {'数据项': ['Id', 'Name', 'Full Comment', 'Summary', 'Api Calls', 'CommentIs Xml', 'Sampled At', 'Solution Id', 'Language', 'Name Tokenized']}, 'MethodParameter': {'数据项': ['Id', 'Method Id', 'Type', 'Name']}, 'Repo': {'数据项': ['Id', 'Url', 'Stars', 'Forks', 'Watchers', 'Processed Time']}, 'Solution': {'数据项': ['Id', 'Repository Id', 'Path', 'Processed Time', 'Was Compiled']}}\n    ",
        "input": "",
        "output": "```sql\nSELECT COUNT(DISTINCT r.Id)\nFROM Repo r\nJOIN Solution s ON r.Id = s.Repository Id\nJOIN Method m ON s.Id = m.Solution Id\nWHERE r.Stars > 200 AND s.Processed Time < 636439500080712000;\n```",
        "history": []
    }
]